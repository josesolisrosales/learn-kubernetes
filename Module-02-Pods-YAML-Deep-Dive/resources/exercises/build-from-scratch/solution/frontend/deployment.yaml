# Frontend Deployment - E-commerce Platform
# Demonstrates multi-container pattern with logging sidecar
# Implements rolling update strategy with proper health checks

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-app
  namespace: ecommerce-platform
  labels:
    app: ecommerce-platform
    component: frontend
    tier: presentation
    version: v1.0.0
    managed-by: kubernetes
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubernetes.io/description: "Frontend web server with nginx serving React SPA"
    contact.kubernetes.io/team: "frontend-team"
    documentation.kubernetes.io/url: "https://docs.company.com/ecommerce-frontend"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: ecommerce-platform
      component: frontend
      tier: presentation
  template:
    metadata:
      labels:
        app: ecommerce-platform
        component: frontend
        tier: presentation
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
        prometheus.io/path: "/metrics"
    spec:
      # Security context for the pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 101  # nginx user
        runAsGroup: 101
        fsGroup: 101
      
      # Graceful shutdown configuration
      terminationGracePeriodSeconds: 30
      
      # Init container to verify backend availability
      initContainers:
      - name: wait-for-backend
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "Waiting for backend API to be available..."
          until nc -z backend-api-service 8080; do
            echo "Backend not ready, waiting 5 seconds..."
            sleep 5
          done
          echo "Backend API is ready!"
        resources:
          requests:
            memory: "16Mi"
            cpu: "10m"
          limits:
            memory: "32Mi"
            cpu: "50m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534  # nobody user
          capabilities:
            drop:
            - ALL
      
      containers:
      # Main frontend container
      - name: nginx
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 8080
          name: api-proxy
          protocol: TCP
        
        # Volume mounts
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
          readOnly: true
        - name: frontend-content
          mountPath: /usr/share/nginx/html
          readOnly: true
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
        - name: shared-logs
          mountPath: /var/log/nginx
        
        # Environment variables
        env:
        - name: NGINX_PORT
          value: "80"
        - name: BACKEND_API_URL
          value: "http://backend-api-service:8080"
        - name: APP_VERSION
          value: "v1.0.0"
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: environment
        
        # Resource management
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 80
            httpHeaders:
            - name: Host
              value: localhost
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
            httpHeaders:
            - name: Host
              value: localhost
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Graceful shutdown
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                echo "Gracefully shutting down nginx..."
                nginx -s quit
                sleep 10
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 101
          runAsGroup: 101
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE  # Allow binding to port 80
      
      # Logging sidecar container
      - name: log-collector
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "Log collector starting..."
          while true; do
            if [ -f /var/log/nginx/access.log ]; then
              tail -f /var/log/nginx/access.log | while read line; do
                echo "[FRONTEND-ACCESS] $line"
              done &
            fi
            if [ -f /var/log/nginx/error.log ]; then
              tail -f /var/log/nginx/error.log | while read line; do
                echo "[FRONTEND-ERROR] $line"
              done &
            fi
            sleep 30
          done
        
        volumeMounts:
        - name: shared-logs
          mountPath: /var/log/nginx
          readOnly: true
        
        resources:
          requests:
            memory: "16Mi"
            cpu: "10m"
          limits:
            memory: "32Mi"
            cpu: "50m"
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
      
      # Nginx Exporter for Prometheus metrics
      - name: nginx-exporter
        image: nginx/nginx-prometheus-exporter:0.11.0
        ports:
        - containerPort: 9113
          name: metrics
          protocol: TCP
        
        args:
        - -nginx.scrape-uri=http://localhost:80/nginx_status
        - -web.listen-address=:9113
        
        resources:
          requests:
            memory: "16Mi"
            cpu: "10m"
          limits:
            memory: "32Mi"
            cpu: "50m"
        
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9113
          initialDelaySeconds: 15
          periodSeconds: 30
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
      
      # Volumes
      volumes:
      - name: nginx-config
        configMap:
          name: frontend-config
          defaultMode: 0644
      - name: frontend-content
        configMap:
          name: frontend-content
          defaultMode: 0644
      - name: shared-logs
        emptyDir: {}
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      
      # Pod scheduling preferences
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - frontend
              topologyKey: kubernetes.io/hostname
      
      # Node selection
      nodeSelector:
        kubernetes.io/os: linux
      
      # Tolerations for special nodes (if needed)
      tolerations:
      - key: "node-role.kubernetes.io/frontend"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"