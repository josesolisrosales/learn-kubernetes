# External Service Mapping Example
# Demonstrates how to map external services to Kubernetes services
# Shows different patterns for accessing external databases, APIs, and legacy systems

---
# Namespace for external service mapping demo
apiVersion: v1
kind: Namespace
metadata:
  name: external-services-demo
  labels:
    purpose: external-service-mapping
    network-pattern: hybrid

---
# External Service - Database (IP Address)
# Maps to an external PostgreSQL database running outside the cluster
apiVersion: v1
kind: Service
metadata:
  name: external-database
  namespace: external-services-demo
  labels:
    app: external-services
    service-type: database
    location: external
  annotations:
    service.kubernetes.io/description: "External PostgreSQL database service"
spec:
  type: ExternalName
  externalName: db.company.com
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP

---
# Endpoints for IP-based external service
# For services that don't have DNS names
apiVersion: v1
kind: Endpoints
metadata:
  name: external-redis-cache
  namespace: external-services-demo
  labels:
    app: external-services
    service-type: cache
subsets:
- addresses:
  - ip: 192.168.100.50  # External Redis server IP
  - ip: 192.168.100.51  # External Redis server IP (backup)
  ports:
  - name: redis
    port: 6379
    protocol: TCP

---
# Service without selector (for the above endpoints)
apiVersion: v1
kind: Service
metadata:
  name: external-redis-cache
  namespace: external-services-demo
  labels:
    app: external-services
    service-type: cache
    location: external
  annotations:
    service.kubernetes.io/description: "External Redis cache cluster"
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  # No selector - uses manual Endpoints

---
# External API Service (Third-party REST API)
apiVersion: v1
kind: Service
metadata:
  name: external-payment-api
  namespace: external-services-demo
  labels:
    app: external-services
    service-type: api
    provider: stripe
  annotations:
    service.kubernetes.io/description: "External payment processing API"
spec:
  type: ExternalName
  externalName: api.stripe.com
  ports:
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP

---
# Legacy System Service (Internal network)
apiVersion: v1
kind: Service
metadata:
  name: legacy-erp-system
  namespace: external-services-demo
  labels:
    app: external-services
    service-type: erp
    era: legacy
  annotations:
    service.kubernetes.io/description: "Legacy ERP system on internal network"
spec:
  type: ExternalName
  externalName: erp.internal.company.com
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP

---
# External Load Balancer Service
# Maps to an external load balancer or CDN
apiVersion: v1
kind: Service
metadata:
  name: external-cdn
  namespace: external-services-demo
  labels:
    app: external-services
    service-type: cdn
    provider: cloudflare
spec:
  type: ExternalName
  externalName: cdn.company.com
  ports:
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP

---
# Headless service for external service discovery
apiVersion: v1
kind: Service
metadata:
  name: external-microservices
  namespace: external-services-demo
  labels:
    app: external-services
    service-type: microservices
    location: external
  annotations:
    service.kubernetes.io/description: "External microservices cluster for service discovery"
spec:
  type: ClusterIP
  clusterIP: None  # Headless service
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP

---
# Endpoints for headless external service
apiVersion: v1
kind: Endpoints
metadata:
  name: external-microservices
  namespace: external-services-demo
subsets:
- addresses:
  # External microservice instances
  - ip: 10.100.1.10
    hostname: user-service
  - ip: 10.100.1.11
    hostname: order-service
  - ip: 10.100.1.12
    hostname: inventory-service
  ports:
  - name: http
    port: 8080
    protocol: TCP

---
# Demo Application that uses external services
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-service-client
  namespace: external-services-demo
  labels:
    app: external-service-client
    role: demo
spec:
  replicas: 2
  selector:
    matchLabels:
      app: external-service-client
  template:
    metadata:
      labels:
        app: external-service-client
        role: demo
    spec:
      containers:
      - name: client-app
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: app-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: app-content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
        env:
        - name: EXTERNAL_DB_HOST
          value: "external-database.external-services-demo.svc.cluster.local"
        - name: EXTERNAL_CACHE_HOST
          value: "external-redis-cache.external-services-demo.svc.cluster.local"
        - name: EXTERNAL_API_HOST
          value: "external-payment-api.external-services-demo.svc.cluster.local"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: app-config
        configMap:
          name: external-service-client-config
      - name: app-content
        configMap:
          name: external-service-client-content

---
# Service for the demo application
apiVersion: v1
kind: Service
metadata:
  name: external-service-client
  namespace: external-services-demo
  labels:
    app: external-service-client
spec:
  type: ClusterIP
  selector:
    app: external-service-client
  ports:
  - name: http
    port: 80
    targetPort: 80

---
# Network Policy for external service access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: external-service-access
  namespace: external-services-demo
  labels:
    policy-type: external-access
spec:
  podSelector:
    matchLabels:
      app: external-service-client
  policyTypes:
  - Egress
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow access to external database
  - to: []
    ports:
    - protocol: TCP
      port: 5432
  # Allow access to external Redis
  - to: []
    ports:
    - protocol: TCP
      port: 6379
  # Allow access to external APIs (HTTPS)
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow access to legacy systems
  - to: []
    ports:
    - protocol: TCP
      port: 8080

---
# ConfigMap for client application
apiVersion: v1
kind: ConfigMap
metadata:
  name: external-service-client-config
  namespace: external-services-demo
data:
  default.conf: |
    server {
        listen 80;
        server_name _;
        
        add_header X-External-Services "enabled" always;
        add_header X-Service-Type "external-client" always;
        add_header X-Pod-Name $hostname always;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
        
        location /health {
            access_log off;
            return 200 '{"status":"healthy","external_services":"connected","pod":"$hostname","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # Proxy to external database (health check)
        location /db-health {
            access_log off;
            return 200 '{"service":"external-database","host":"external-database.external-services-demo.svc.cluster.local","port":5432,"status":"mapped"}';
            add_header Content-Type application/json;
        }
        
        # Proxy to external cache
        location /cache-health {
            access_log off;
            return 200 '{"service":"external-redis-cache","host":"external-redis-cache.external-services-demo.svc.cluster.local","port":6379,"status":"mapped"}';
            add_header Content-Type application/json;
        }
        
        # External API status
        location /api-status {
            access_log off;
            return 200 '{"service":"external-payment-api","host":"external-payment-api.external-services-demo.svc.cluster.local","port":443,"status":"mapped"}';
            add_header Content-Type application/json;
        }
        
        # Legacy system status
        location /legacy-status {
            access_log off;
            return 200 '{"service":"legacy-erp-system","host":"legacy-erp-system.external-services-demo.svc.cluster.local","port":8080,"status":"mapped"}';
            add_header Content-Type application/json;
        }
    }

---
# ConfigMap for application content
apiVersion: v1
kind: ConfigMap
metadata:
  name: external-service-client-content
  namespace: external-services-demo
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>External Service Mapping Demo</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                background: rgba(255, 255, 255, 0.1);
                padding: 30px;
                border-radius: 15px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            }
            .service-badge {
                background: #6c5ce7;
                padding: 10px 20px;
                border-radius: 25px;
                display: inline-block;
                margin-bottom: 20px;
                font-weight: bold;
            }
            .service-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 20px;
                margin: 20px 0;
            }
            .service-card {
                background: rgba(255, 255, 255, 0.2);
                padding: 20px;
                border-radius: 10px;
                border-left: 4px solid #6c5ce7;
            }
            .service-type {
                color: #a29bfe;
                font-size: 14px;
                font-weight: bold;
                margin-bottom: 5px;
            }
            .test-button {
                background: #6c5ce7;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                cursor: pointer;
                margin: 5px;
                font-size: 12px;
            }
            .test-button:hover {
                background: #5b4cdb;
            }
            .test-result {
                background: rgba(0, 0, 0, 0.3);
                padding: 15px;
                border-radius: 8px;
                margin: 10px 0;
                font-family: monospace;
                font-size: 12px;
                max-height: 200px;
                overflow-y: auto;
            }
            .mapping-table {
                width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
                background: rgba(255, 255, 255, 0.9);
                color: #333;
                border-radius: 10px;
                overflow: hidden;
            }
            .mapping-table th, .mapping-table td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }
            .mapping-table th {
                background: #6c5ce7;
                color: white;
                font-weight: bold;
            }
            .command {
                background: #2d3748;
                color: #e2e8f0;
                padding: 15px;
                border-radius: 8px;
                font-family: 'Courier New', monospace;
                margin: 10px 0;
                overflow-x: auto;
            }
            .pattern-section {
                background: rgba(255, 255, 255, 0.1);
                padding: 20px;
                border-radius: 10px;
                margin: 20px 0;
            }
        </style>
        <script>
            function testService(endpoint, resultId) {
                const resultDiv = document.getElementById(resultId);
                resultDiv.style.display = 'block';
                resultDiv.innerHTML = 'Testing...';
                
                fetch(endpoint)
                    .then(response => response.json())
                    .then(data => {
                        resultDiv.innerHTML = JSON.stringify(data, null, 2);
                    })
                    .catch(error => {
                        resultDiv.innerHTML = 'Error: ' + error.message;
                    });
            }
        </script>
    </head>
    <body>
        <div class="container">
            <div class="service-badge">🌐 External Service Mapping</div>
            <h1>External Service Integration with Kubernetes</h1>
            <p>This demo shows how to map external services (databases, APIs, legacy systems) to Kubernetes services for seamless integration.</p>
            
            <h2>📋 Mapped External Services</h2>
            <table class="mapping-table">
                <thead>
                    <tr>
                        <th>Service Name</th>
                        <th>External Location</th>
                        <th>Type</th>
                        <th>Port</th>
                        <th>Test</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>external-database</td>
                        <td>db.company.com</td>
                        <td>ExternalName</td>
                        <td>5432</td>
                        <td><button class="test-button" onclick="testService('/db-health', 'db-result')">Test</button></td>
                    </tr>
                    <tr>
                        <td>external-redis-cache</td>
                        <td>192.168.100.50-51</td>
                        <td>ClusterIP + Endpoints</td>
                        <td>6379</td>
                        <td><button class="test-button" onclick="testService('/cache-health', 'cache-result')">Test</button></td>
                    </tr>
                    <tr>
                        <td>external-payment-api</td>
                        <td>api.stripe.com</td>
                        <td>ExternalName</td>
                        <td>443</td>
                        <td><button class="test-button" onclick="testService('/api-status', 'api-result')">Test</button></td>
                    </tr>
                    <tr>
                        <td>legacy-erp-system</td>
                        <td>erp.internal.company.com</td>
                        <td>ExternalName</td>
                        <td>8080</td>
                        <td><button class="test-button" onclick="testService('/legacy-status', 'legacy-result')">Test</button></td>
                    </tr>
                </tbody>
            </table>
            
            <div id="db-result" class="test-result" style="display: none;"></div>
            <div id="cache-result" class="test-result" style="display: none;"></div>
            <div id="api-result" class="test-result" style="display: none;"></div>
            <div id="legacy-result" class="test-result" style="display: none;"></div>
            
            <h2>🏗️ Service Mapping Patterns</h2>
            <div class="service-grid">
                <div class="service-card">
                    <div class="service-type">ExternalName Service</div>
                    <h3>DNS-Based Mapping</h3>
                    <p>Maps to external services using DNS names (CNAME)</p>
                    <p><strong>Use case:</strong> External databases, APIs with domain names</p>
                    <p><strong>Example:</strong> db.company.com → external-database service</p>
                </div>
                
                <div class="service-card">
                    <div class="service-type">ClusterIP + Endpoints</div>
                    <h3>IP-Based Mapping</h3>
                    <p>Maps to external services using IP addresses</p>
                    <p><strong>Use case:</strong> Legacy systems, IP-only services, load balancing</p>
                    <p><strong>Example:</strong> Redis cluster at 192.168.100.x</p>
                </div>
                
                <div class="service-card">
                    <div class="service-type">Headless Service</div>
                    <h3>Service Discovery</h3>
                    <p>Provides DNS records for multiple external endpoints</p>
                    <p><strong>Use case:</strong> External microservices, distributed systems</p>
                    <p><strong>Example:</strong> Multiple microservice instances</p>
                </div>
                
                <div class="service-card">
                    <div class="service-type">Proxy Service</div>
                    <h3>Protocol Translation</h3>
                    <p>Handles protocol conversion and authentication</p>
                    <p><strong>Use case:</strong> Legacy protocols, authentication proxies</p>
                    <p><strong>Example:</strong> HTTP to TCP conversion</p>
                </div>
            </div>
            
            <h2>🧪 Testing External Services</h2>
            
            <h3>DNS Resolution Testing</h3>
            <div class="command"># Test DNS resolution within the cluster
kubectl exec -it &lt;pod-name&gt; -n external-services-demo -- nslookup external-database
kubectl exec -it &lt;pod-name&gt; -n external-services-demo -- nslookup external-redis-cache

# Test service connectivity
kubectl exec -it &lt;pod-name&gt; -n external-services-demo -- telnet external-database 5432
kubectl exec -it &lt;pod-name&gt; -n external-services-demo -- nc -zv external-redis-cache 6379</div>
            
            <h3>Service Discovery Verification</h3>
            <div class="command"># List all services and their endpoints
kubectl get services -n external-services-demo
kubectl get endpoints -n external-services-demo

# Describe external services
kubectl describe service external-database -n external-services-demo
kubectl describe endpoints external-redis-cache -n external-services-demo</div>
            
            <h3>Network Policy Testing</h3>
            <div class="command"># Test network policy compliance
kubectl exec -it external-service-client-xxx -n external-services-demo -- curl -I external-database:5432
kubectl exec -it external-service-client-xxx -n external-services-demo -- curl external-payment-api:443</div>
            
            <div class="pattern-section">
                <h2>📚 Implementation Patterns</h2>
                
                <h3>1. ExternalName Service Pattern</h3>
                <div class="command">apiVersion: v1
kind: Service
metadata:
  name: external-api
spec:
  type: ExternalName
  externalName: api.external-service.com
  ports:
  - port: 443
    targetPort: 443</div>
                
                <h3>2. ClusterIP + Manual Endpoints Pattern</h3>
                <div class="command">apiVersion: v1
kind: Service
metadata:
  name: external-db
spec:
  type: ClusterIP
  ports:
  - port: 5432
---
apiVersion: v1
kind: Endpoints
metadata:
  name: external-db
subsets:
- addresses:
  - ip: 192.168.1.100
  ports:
  - port: 5432</div>
                
                <h3>3. Headless Service Pattern</h3>
                <div class="command">apiVersion: v1
kind: Service
metadata:
  name: external-cluster
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 8080</div>
            </div>
            
            <h2>💡 Best Practices</h2>
            <div class="pattern-section">
                <ul>
                    <li><strong>Security:</strong> Use NetworkPolicies to control external access</li>
                    <li><strong>Monitoring:</strong> Monitor external service health and latency</li>
                    <li><strong>Failover:</strong> Configure multiple endpoints for high availability</li>
                    <li><strong>Authentication:</strong> Secure external service connections</li>
                    <li><strong>Documentation:</strong> Document external service dependencies</li>
                    <li><strong>Testing:</strong> Regularly test external service connectivity</li>
                </ul>
            </div>
            
            <h2>🔧 Troubleshooting</h2>
            <div class="pattern-section">
                <h4>Common Issues:</h4>
                <ul>
                    <li><strong>DNS Resolution:</strong> Check ExternalName service configuration</li>
                    <li><strong>Connectivity:</strong> Verify network policies and firewall rules</li>
                    <li><strong>Port Conflicts:</strong> Ensure correct port mappings</li>
                    <li><strong>Authentication:</strong> Verify credentials and certificates</li>
                    <li><strong>Load Balancing:</strong> Check endpoint health and distribution</li>
                </ul>
            </div>
        </div>
    </body>
    </html>

---
# Test pod for external service testing
apiVersion: v1
kind: Pod
metadata:
  name: external-service-test
  namespace: external-services-demo
  labels:
    app: test-client
    role: debugging
spec:
  containers:
  - name: test-tools
    image: alpine:3.18
    command: 
    - sh
    - -c
    - |
      apk add --no-cache curl telnet nmap-ncat bind-tools
      sleep 3600
    resources:
      requests:
        memory: "32Mi"
        cpu: "25m"
  restartPolicy: Never