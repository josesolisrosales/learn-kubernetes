# Host-Based Routing Ingress Example
# Demonstrates routing based on HTTP Host header for multi-tenant applications
# Shows different domains routing to different services and applications

---
# Namespace for host-based routing demo
apiVersion: v1
kind: Namespace
metadata:
  name: host-routing-demo
  labels:
    purpose: host-based-routing
    ingress-pattern: multi-tenant

---
# Main Application Deployment (example.com)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: main-app
  namespace: host-routing-demo
  labels:
    app: main-app
    domain: example.com
spec:
  replicas: 2
  selector:
    matchLabels:
      app: main-app
  template:
    metadata:
      labels:
        app: main-app
        domain: example.com
    spec:
      containers:
      - name: web-server
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: main-app-config
      - name: content
        configMap:
          name: main-app-content

---
# API Application Deployment (api.example.com)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-app
  namespace: host-routing-demo
  labels:
    app: api-app
    domain: api.example.com
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api-app
  template:
    metadata:
      labels:
        app: api-app
        domain: api.example.com
    spec:
      containers:
      - name: api-server
        image: nginx:1.25-alpine
        ports:
        - containerPort: 8080
          name: http
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: api-app-config

---
# Admin Application Deployment (admin.example.com)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-app
  namespace: host-routing-demo
  labels:
    app: admin-app
    domain: admin.example.com
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admin-app
  template:
    metadata:
      labels:
        app: admin-app
        domain: admin.example.com
    spec:
      containers:
      - name: admin-server
        image: nginx:1.25-alpine
        ports:
        - containerPort: 3000
          name: http
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /admin/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: admin-app-config
      - name: content
        configMap:
          name: admin-app-content

---
# Blog Application Deployment (blog.example.com)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blog-app
  namespace: host-routing-demo
  labels:
    app: blog-app
    domain: blog.example.com
spec:
  replicas: 2
  selector:
    matchLabels:
      app: blog-app
  template:
    metadata:
      labels:
        app: blog-app
        domain: blog.example.com
    spec:
      containers:
      - name: blog-server
        image: nginx:1.25-alpine
        ports:
        - containerPort: 4000
          name: http
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /health
            port: 4000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: blog-app-config
      - name: content
        configMap:
          name: blog-app-content

---
# Services for each application
apiVersion: v1
kind: Service
metadata:
  name: main-app-service
  namespace: host-routing-demo
  labels:
    app: main-app
spec:
  type: ClusterIP
  selector:
    app: main-app
  ports:
  - name: http
    port: 80
    targetPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: api-app-service
  namespace: host-routing-demo
  labels:
    app: api-app
spec:
  type: ClusterIP
  selector:
    app: api-app
  ports:
  - name: http
    port: 8080
    targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: admin-app-service
  namespace: host-routing-demo
  labels:
    app: admin-app
spec:
  type: ClusterIP
  selector:
    app: admin-app
  ports:
  - name: http
    port: 3000
    targetPort: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: blog-app-service
  namespace: host-routing-demo
  labels:
    app: blog-app
spec:
  type: ClusterIP
  selector:
    app: blog-app
  ports:
  - name: http
    port: 4000
    targetPort: 4000

---
# Host-Based Routing Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: host-based-routing
  namespace: host-routing-demo
  labels:
    purpose: host-routing
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "false"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Ingress-Pattern "Host-Based-Routing" always;
      add_header X-Matched-Host "$host" always;
      add_header X-Server-Name "$server_name" always;
spec:
  ingressClassName: nginx
  rules:
  # Main website
  - host: example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: main-app-service
            port:
              number: 80
  
  # www subdomain (same as main)
  - host: www.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: main-app-service
            port:
              number: 80
  
  # API subdomain
  - host: api.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-app-service
            port:
              number: 8080
  
  # Admin subdomain
  - host: admin.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: admin-app-service
            port:
              number: 3000
  
  # Blog subdomain
  - host: blog.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: blog-app-service
            port:
              number: 4000

---
# Wildcard Ingress for dynamic subdomains
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wildcard-routing
  namespace: host-routing-demo
  labels:
    purpose: wildcard-routing
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/server-snippet: |
      # Extract subdomain for dynamic routing
      set $subdomain "";
      if ($host ~* "^([^.]+)\.example\.local$") {
        set $subdomain $1;
      }
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Ingress-Pattern "Wildcard-Routing" always;
      add_header X-Subdomain "$subdomain" always;
      add_header X-Original-Host "$host" always;
spec:
  ingressClassName: nginx
  rules:
  # Wildcard for any subdomain under example.local
  - host: "*.example.local"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: main-app-service
            port:
              number: 80

---
# Multi-domain Ingress (different root domains)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: multi-domain-routing
  namespace: host-routing-demo
  labels:
    purpose: multi-domain-routing
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Ingress-Pattern "Multi-Domain-Routing" always;
      add_header X-Domain-Type "$host" always;
spec:
  ingressClassName: nginx
  rules:
  # Different root domain 1
  - host: mycompany.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: main-app-service
            port:
              number: 80
  
  # Different root domain 2
  - host: mycompany.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: blog-app-service
            port:
              number: 4000
  
  # Different root domain 3 with API
  - host: api.mycompany.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-app-service
            port:
              number: 8080

---
# Test pod for host-based routing testing
apiVersion: v1
kind: Pod
metadata:
  name: host-test-client
  namespace: host-routing-demo
  labels:
    app: test-client
    role: debugging
spec:
  containers:
  - name: test-tools
    image: alpine:3.18
    command: 
    - sh
    - -c
    - |
      apk add --no-cache curl
      sleep 3600
    resources:
      requests:
        memory: "32Mi"
        cpu: "25m"

---
# ConfigMaps for each application
apiVersion: v1
kind: ConfigMap
metadata:
  name: main-app-config
  namespace: host-routing-demo
data:
  default.conf: |
    server {
        listen 80;
        server_name _;
        
        add_header X-Service-Type "Main-Website" always;
        add_header X-Pod-Name $hostname always;
        add_header X-Host $host always;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
        
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"main-website","host":"$host","pod":"$hostname","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-app-config
  namespace: host-routing-demo
data:
  default.conf: |
    server {
        listen 8080;
        server_name _;
        
        add_header X-Service-Type "API-Server" always;
        add_header X-Pod-Name $hostname always;
        add_header X-Host $host always;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        
        location / {
            return 200 '{"service":"api-server","host":"$host","endpoints":["/api/users","/api/products","/api/orders"],"version":"v1.0.0","pod":"$hostname"}';
            add_header Content-Type application/json;
        }
        
        location /api/health {
            access_log off;
            return 200 '{"status":"healthy","service":"api-server","host":"$host","pod":"$hostname","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        location /api/users {
            return 200 '{"users":[{"id":1,"name":"John Doe"},{"id":2,"name":"Jane Smith"}],"host":"$host","service":"api-server","pod":"$hostname"}';
            add_header Content-Type application/json;
        }
        
        location /api/products {
            return 200 '{"products":[{"id":1,"name":"Laptop","price":999.99},{"id":2,"name":"Phone","price":599.99}],"host":"$host","service":"api-server","pod":"$hostname"}';
            add_header Content-Type application/json;
        }
        
        location /api/orders {
            return 200 '{"orders":[{"id":1,"total":999.99,"status":"completed"}],"host":"$host","service":"api-server","pod":"$hostname"}';
            add_header Content-Type application/json;
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: admin-app-config
  namespace: host-routing-demo
data:
  default.conf: |
    server {
        listen 3000;
        server_name _;
        
        add_header X-Service-Type "Admin-Panel" always;
        add_header X-Pod-Name $hostname always;
        add_header X-Host $host always;
        
        # Security headers for admin
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
        
        location /admin/health {
            access_log off;
            return 200 '{"status":"healthy","service":"admin-panel","host":"$host","pod":"$hostname","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        location /admin/dashboard {
            return 200 '{"page":"dashboard","stats":{"users":150,"orders":45,"revenue":15000},"host":"$host","service":"admin-panel","pod":"$hostname"}';
            add_header Content-Type application/json;
        }
        
        location /admin/users {
            return 200 '{"admin_users":[{"id":1,"username":"admin","role":"super_admin"},{"id":2,"username":"manager","role":"manager"}],"host":"$host","service":"admin-panel","pod":"$hostname"}';
            add_header Content-Type application/json;
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: blog-app-config
  namespace: host-routing-demo
data:
  default.conf: |
    server {
        listen 4000;
        server_name _;
        
        add_header X-Service-Type "Blog-Engine" always;
        add_header X-Pod-Name $hostname always;
        add_header X-Host $host always;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
        
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"blog-engine","host":"$host","pod":"$hostname","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        location /api/posts {
            return 200 '{"posts":[{"id":1,"title":"Welcome to our blog","author":"John Doe","date":"2024-01-15"},{"id":2,"title":"Kubernetes networking guide","author":"Jane Smith","date":"2024-01-16"}],"host":"$host","service":"blog-engine","pod":"$hostname"}';
            add_header Content-Type application/json;
        }
        
        location /api/categories {
            return 200 '{"categories":["Technology","Kubernetes","DevOps","Tutorials"],"host":"$host","service":"blog-engine","pod":"$hostname"}';
            add_header Content-Type application/json;
        }
    }

---
# Content ConfigMaps
apiVersion: v1
kind: ConfigMap
metadata:
  name: main-app-content
  namespace: host-routing-demo
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Host-Based Routing Demo</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 1000px;
                margin: 0 auto;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                background: rgba(255, 255, 255, 0.1);
                padding: 30px;
                border-radius: 15px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            }
            .host-type {
                background: #e74c3c;
                padding: 10px 20px;
                border-radius: 25px;
                display: inline-block;
                margin-bottom: 20px;
                font-weight: bold;
            }
            .domain-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin: 20px 0;
            }
            .domain-card {
                background: rgba(255, 255, 255, 0.2);
                padding: 20px;
                border-radius: 10px;
                border-left: 4px solid #e74c3c;
            }
            .test-button {
                background: #e74c3c;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                cursor: pointer;
                margin: 5px;
                font-size: 12px;
            }
            .test-result {
                background: rgba(0, 0, 0, 0.3);
                padding: 15px;
                border-radius: 8px;
                margin: 10px 0;
                font-family: monospace;
                font-size: 12px;
                max-height: 200px;
                overflow-y: auto;
            }
            .host-table {
                width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
                background: rgba(255, 255, 255, 0.9);
                color: #333;
                border-radius: 10px;
                overflow: hidden;
            }
            .host-table th, .host-table td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }
            .host-table th {
                background: #e74c3c;
                color: white;
                font-weight: bold;
            }
            .command {
                background: #2d3748;
                color: #e2e8f0;
                padding: 15px;
                border-radius: 8px;
                font-family: 'Courier New', monospace;
                margin: 10px 0;
                overflow-x: auto;
            }
        </style>
        <script>
            function updateHostInfo() {
                document.getElementById('current-host').innerHTML = window.location.host;
                document.getElementById('current-protocol').innerHTML = window.location.protocol;
            }
            
            function testHostEndpoint(url, resultId) {
                const resultDiv = document.getElementById(resultId);
                resultDiv.style.display = 'block';
                resultDiv.innerHTML = 'Testing...';
                
                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        resultDiv.innerHTML = JSON.stringify(data, null, 2);
                    })
                    .catch(error => {
                        resultDiv.innerHTML = 'Error: ' + error.message;
                    });
            }
            
            window.onload = updateHostInfo;
        </script>
    </head>
    <body>
        <div class="container">
            <div class="host-type">🌐 Host-Based Routing</div>
            <h1>Host-Based Routing Demonstration</h1>
            <p><strong>Main Website</strong> - Accessed via: <span id="current-host"></span></p>
            
            <h2>🗺️ Host Routing Configuration</h2>
            <table class="host-table">
                <thead>
                    <tr>
                        <th>Host</th>
                        <th>Service</th>
                        <th>Port</th>
                        <th>Purpose</th>
                        <th>Test</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>example.com</td>
                        <td>main-app-service</td>
                        <td>80</td>
                        <td>Main Website</td>
                        <td><button class="test-button" onclick="testHostEndpoint('/health', 'main-result')">Test</button></td>
                    </tr>
                    <tr>
                        <td>www.example.com</td>
                        <td>main-app-service</td>
                        <td>80</td>
                        <td>Main Website (www)</td>
                        <td><button class="test-button" onclick="testHostEndpoint('/health', 'www-result')">Test</button></td>
                    </tr>
                    <tr>
                        <td>api.example.com</td>
                        <td>api-app-service</td>
                        <td>8080</td>
                        <td>REST API</td>
                        <td><button class="test-button" onclick="alert('Use Host header: api.example.com')">Manual</button></td>
                    </tr>
                    <tr>
                        <td>admin.example.com</td>
                        <td>admin-app-service</td>
                        <td>3000</td>
                        <td>Admin Panel</td>
                        <td><button class="test-button" onclick="alert('Use Host header: admin.example.com')">Manual</button></td>
                    </tr>
                    <tr>
                        <td>blog.example.com</td>
                        <td>blog-app-service</td>
                        <td>4000</td>
                        <td>Blog Engine</td>
                        <td><button class="test-button" onclick="alert('Use Host header: blog.example.com')">Manual</button></td>
                    </tr>
                </tbody>
            </table>
            
            <div id="main-result" class="test-result" style="display: none;"></div>
            <div id="www-result" class="test-result" style="display: none;"></div>
            
            <h2>🧪 Testing Commands</h2>
            
            <h3>Test Different Hosts with curl</h3>
            <div class="command"># Get ingress IP
kubectl get ingress -n host-routing-demo

# Test main website
curl -H "Host: example.com" http://&lt;INGRESS-IP&gt;

# Test www subdomain
curl -H "Host: www.example.com" http://&lt;INGRESS-IP&gt;

# Test API subdomain
curl -H "Host: api.example.com" http://&lt;INGRESS-IP&gt;/api/users

# Test admin subdomain
curl -H "Host: admin.example.com" http://&lt;INGRESS-IP&gt;/admin/dashboard

# Test blog subdomain
curl -H "Host: blog.example.com" http://&lt;INGRESS-IP&gt;/api/posts</div>
            
            <h3>Test Wildcard Routing</h3>
            <div class="command"># Test dynamic subdomains
curl -H "Host: test.example.local" http://&lt;INGRESS-IP&gt;
curl -H "Host: dev.example.local" http://&lt;INGRESS-IP&gt;
curl -H "Host: staging.example.local" http://&lt;INGRESS-IP&gt;</div>
            
            <h3>Test Multiple Domains</h3>
            <div class="command"># Test different root domains
curl -H "Host: mycompany.com" http://&lt;INGRESS-IP&gt;
curl -H "Host: mycompany.org" http://&lt;INGRESS-IP&gt;
curl -H "Host: api.mycompany.io" http://&lt;INGRESS-IP&gt;</div>
            
            <h2>🎯 Use Cases for Host-Based Routing</h2>
            <div class="domain-grid">
                <div class="domain-card">
                    <h3>Multi-Tenant SaaS</h3>
                    <p>Route different customers to their dedicated services</p>
                    <p><code>customer1.saas.com</code> → Service A<br>
                    <code>customer2.saas.com</code> → Service B</p>
                </div>
                
                <div class="domain-card">
                    <h3>Microservices Architecture</h3>
                    <p>Separate services by subdomain</p>
                    <p><code>api.company.com</code> → API Service<br>
                    <code>admin.company.com</code> → Admin Service</p>
                </div>
                
                <div class="domain-card">
                    <h3>Environment Separation</h3>
                    <p>Different environments on different hosts</p>
                    <p><code>prod.company.com</code> → Production<br>
                    <code>staging.company.com</code> → Staging</p>
                </div>
                
                <div class="domain-card">
                    <h3>Brand Separation</h3>
                    <p>Multiple brands, same infrastructure</p>
                    <p><code>brand-a.com</code> → Brand A App<br>
                    <code>brand-b.com</code> → Brand B App</p>
                </div>
            </div>
            
            <h2>📋 Key Features</h2>
            <ul>
                <li><strong>Host Header Matching:</strong> Routes based on HTTP Host header</li>
                <li><strong>Wildcard Support:</strong> *.example.com matches any subdomain</li>
                <li><strong>Multiple Domains:</strong> Same ingress can handle different root domains</li>
                <li><strong>SSL/TLS Ready:</strong> Can be combined with TLS termination</li>
                <li><strong>Priority Rules:</strong> More specific hosts take precedence</li>
            </ul>
            
            <h2>🔧 Setup Requirements</h2>
            <div class="command"># Local testing with /etc/hosts (Linux/Mac)
echo "&lt;INGRESS-IP&gt; example.com" | sudo tee -a /etc/hosts
echo "&lt;INGRESS-IP&gt; www.example.com" | sudo tee -a /etc/hosts
echo "&lt;INGRESS-IP&gt; api.example.com" | sudo tee -a /etc/hosts
echo "&lt;INGRESS-IP&gt; admin.example.com" | sudo tee -a /etc/hosts
echo "&lt;INGRESS-IP&gt; blog.example.com" | sudo tee -a /etc/hosts

# Or use curl with Host header for testing</div>
        </div>
    </body>
    </html>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: admin-app-content
  namespace: host-routing-demo
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Admin Panel</title>
        <style>
            body { font-family: Arial; background: #2c3e50; color: white; padding: 20px; }
            .admin-container { max-width: 800px; margin: 0 auto; background: #34495e; padding: 30px; border-radius: 10px; }
            .admin-header { background: #e74c3c; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
            .admin-section { background: #3e5469; padding: 15px; margin: 10px 0; border-radius: 5px; }
        </style>
    </head>
    <body>
        <div class="admin-container">
            <div class="admin-header">
                <h1>🔧 Admin Panel</h1>
                <p>Host-based routing to admin.example.com</p>
            </div>
            
            <div class="admin-section">
                <h3>System Stats</h3>
                <p>Active Users: 150 | Total Orders: 45 | Revenue: $15,000</p>
            </div>
            
            <div class="admin-section">
                <h3>Quick Actions</h3>
                <button onclick="alert('User management accessed')">Manage Users</button>
                <button onclick="alert('Order management accessed')">Manage Orders</button>
                <button onclick="alert('System settings accessed')">Settings</button>
            </div>
        </div>
    </body>
    </html>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: blog-app-content
  namespace: host-routing-demo
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Company Blog</title>
        <style>
            body { font-family: Arial; background: #f8f9fa; padding: 20px; }
            .blog-container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .blog-header { background: #28a745; color: white; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
            .blog-post { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #28a745; }
        </style>
    </head>
    <body>
        <div class="blog-container">
            <div class="blog-header">
                <h1>📝 Company Blog</h1>
                <p>Host-based routing to blog.example.com</p>
            </div>
            
            <div class="blog-post">
                <h3>Welcome to our blog</h3>
                <p><small>By John Doe - January 15, 2024</small></p>
                <p>This blog demonstrates host-based routing in Kubernetes using Ingress controllers.</p>
            </div>
            
            <div class="blog-post">
                <h3>Kubernetes networking guide</h3>
                <p><small>By Jane Smith - January 16, 2024</small></p>
                <p>Learn about different networking patterns and service discovery in Kubernetes.</p>
            </div>
        </div>
    </body>
    </html>