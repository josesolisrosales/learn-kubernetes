# ClusterIP Service Example
# Demonstrates the default Kubernetes service type for internal cluster communication
# ClusterIP services are only accessible from within the cluster

---
# Namespace for ClusterIP service demonstration
apiVersion: v1
kind: Namespace
metadata:
  name: clusterip-example
  labels:
    service-type: clusterip
    purpose: internal-communication

---
# Deployment for the application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
  namespace: clusterip-example
  labels:
    app: web-app
    service-type: clusterip
spec:
  replicas: 3
  selector:
    matchLabels:
      app: web-app
  template:
    metadata:
      labels:
        app: web-app
    spec:
      containers:
      - name: web-server
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: app-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: app-content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: app-config
        configMap:
          name: web-app-config
      - name: app-content
        configMap:
          name: web-app-content

---
# ClusterIP Service (default service type)
apiVersion: v1
kind: Service
metadata:
  name: web-app-clusterip
  namespace: clusterip-example
  labels:
    app: web-app
    service-type: clusterip
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb  # Not used for ClusterIP, just for reference
spec:
  # type: ClusterIP  # This is the default, so it can be omitted
  selector:
    app: web-app
  ports:
  - name: http
    port: 80          # Port exposed by the service
    targetPort: 80    # Port on the pod
    protocol: TCP
  # clusterIP: 10.96.1.100  # Can be set explicitly or auto-assigned
  sessionAffinity: None    # Options: None (default) or ClientIP

---
# Alternative ClusterIP Service with custom configuration
apiVersion: v1
kind: Service
metadata:
  name: web-app-clusterip-custom
  namespace: clusterip-example
  labels:
    app: web-app
    service-type: clusterip
    variant: custom
spec:
  type: ClusterIP
  selector:
    app: web-app
  ports:
  - name: http
    port: 8080        # Different service port
    targetPort: 80    # Same container port
    protocol: TCP
  - name: metrics     # Additional port for monitoring
    port: 9090
    targetPort: 80    # For demo, same container port
    protocol: TCP
  sessionAffinity: ClientIP  # Sticky sessions
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 300

---
# Test client pod for internal access
apiVersion: v1
kind: Pod
metadata:
  name: client-pod
  namespace: clusterip-example
  labels:
    role: client
spec:
  containers:
  - name: client
    image: alpine:3.18
    command: ['sleep', '3600']
    resources:
      requests:
        memory: "32Mi"
        cpu: "25m"
      limits:
        memory: "64Mi"
        cpu: "50m"

---
# Debug pod with network tools
apiVersion: v1
kind: Pod
metadata:
  name: debug-pod
  namespace: clusterip-example
  labels:
    role: debug
spec:
  containers:
  - name: debug-tools
    image: nicolaka/netshoot:v0.11
    command: ['sleep', '3600']
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "100m"

---
# ConfigMap for nginx configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: web-app-config
  namespace: clusterip-example
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;

        # Add headers to show service information
        add_header X-Service-Type "ClusterIP";
        add_header X-Pod-Name $hostname;
        add_header X-Service-Name "web-app-clusterip";
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # API endpoints for testing
        location /api/status {
            access_log off;
            return 200 "{\"status\": \"running\", \"service\": \"ClusterIP\", \"pod\": \"$hostname\"}\n";
            add_header Content-Type application/json;
        }

        location /api/info {
            access_log off;
            return 200 "{\"service_type\": \"ClusterIP\", \"access\": \"internal-only\", \"pod\": \"$hostname\", \"timestamp\": \"$time_iso8601\"}\n";
            add_header Content-Type application/json;
        }
    }

---
# ConfigMap for web content
apiVersion: v1
kind: ConfigMap
metadata:
  name: web-app-content
  namespace: clusterip-example
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>ClusterIP Service Demo</title>
        <style>
            body {
                font-family: 'Arial', sans-serif;
                margin: 0;
                padding: 40px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
            }
            .container {
                max-width: 800px;
                margin: 0 auto;
                background: rgba(255, 255, 255, 0.1);
                padding: 30px;
                border-radius: 15px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            }
            .service-type {
                background: #4CAF50;
                padding: 10px 20px;
                border-radius: 25px;
                display: inline-block;
                margin-bottom: 20px;
                font-weight: bold;
            }
            .info-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin: 20px 0;
            }
            .info-card {
                background: rgba(255, 255, 255, 0.2);
                padding: 20px;
                border-radius: 10px;
                border-left: 4px solid #4CAF50;
            }
            .endpoint {
                background: rgba(255, 255, 255, 0.1);
                padding: 15px;
                border-radius: 8px;
                margin: 10px 0;
                border-left: 3px solid #FF9800;
            }
            .command {
                background: #2d3748;
                color: #e2e8f0;
                padding: 15px;
                border-radius: 8px;
                font-family: 'Courier New', monospace;
                margin: 10px 0;
                overflow-x: auto;
            }
            .success { color: #4CAF50; font-weight: bold; }
            .warning { color: #FF9800; font-weight: bold; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="service-type">üîó ClusterIP Service</div>
            <h1>ClusterIP Service Demonstration</h1>
            
            <div class="info-grid">
                <div class="info-card">
                    <h3>Service Type</h3>
                    <p><strong>ClusterIP</strong> - Internal cluster communication only</p>
                </div>
                <div class="info-card">
                    <h3>Access Scope</h3>
                    <p><strong>Internal Only</strong> - Not accessible from outside the cluster</p>
                </div>
                <div class="info-card">
                    <h3>IP Assignment</h3>
                    <p><strong>Cluster IP</strong> - From service subnet (e.g., 10.96.x.x)</p>
                </div>
                <div class="info-card">
                    <h3>Use Cases</h3>
                    <p><strong>Internal APIs</strong> - Databases, microservices, backend services</p>
                </div>
            </div>

            <h3>üîç Available Endpoints</h3>
            <div class="endpoint">
                <strong>GET /</strong> - This landing page
            </div>
            <div class="endpoint">
                <strong>GET /health</strong> - Health check endpoint
            </div>
            <div class="endpoint">
                <strong>GET /api/status</strong> - Service status (JSON)
            </div>
            <div class="endpoint">
                <strong>GET /api/info</strong> - Service information (JSON)
            </div>

            <h3>üß™ Testing Commands</h3>
            
            <p><strong>1. Check Service Details:</strong></p>
            <div class="command">kubectl get service web-app-clusterip -n clusterip-example -o wide</div>
            
            <p><strong>2. Test Internal Access (from client pod):</strong></p>
            <div class="command">kubectl exec -it client-pod -n clusterip-example -- wget -qO- http://web-app-clusterip</div>
            
            <p><strong>3. Test DNS Resolution:</p>
            <div class="command">kubectl exec -it debug-pod -n clusterip-example -- nslookup web-app-clusterip</div>
            
            <p><strong>4. Test Load Balancing:</strong></p>
            <div class="command">kubectl exec -it debug-pod -n clusterip-example -- sh -c 'for i in {1..5}; do curl -s http://web-app-clusterip/api/status | grep pod; done'</div>
            
            <p><strong>5. Test Custom Service Port:</strong></p>
            <div class="command">kubectl exec -it client-pod -n clusterip-example -- wget -qO- http://web-app-clusterip-custom:8080</div>

            <h3>üìã Key Characteristics</h3>
            <ul>
                <li class="success">‚úÖ Stable internal IP address</li>
                <li class="success">‚úÖ DNS-based service discovery</li>
                <li class="success">‚úÖ Load balancing across pods</li>
                <li class="success">‚úÖ No external access (secure by default)</li>
                <li class="warning">‚ö†Ô∏è Internal cluster communication only</li>
                <li class="warning">‚ö†Ô∏è Requires port forwarding for external testing</li>
            </ul>

            <h3>üîí Security Benefits</h3>
            <p>ClusterIP services provide network isolation by default. External traffic cannot reach these services directly, making them ideal for:</p>
            <ul>
                <li>Database services</li>
                <li>Internal APIs</li>
                <li>Backend microservices</li>
                <li>Cache services (Redis, Memcached)</li>
                <li>Message brokers</li>
            </ul>
        </div>
    </body>
    </html>