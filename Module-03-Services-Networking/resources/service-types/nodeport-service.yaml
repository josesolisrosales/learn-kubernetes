# NodePort Service Example
# Demonstrates NodePort service type for external access via node IPs
# NodePort exposes the service on each node's IP at a static port (30000-32767)

---
# Namespace for NodePort service demonstration
apiVersion: v1
kind: Namespace
metadata:
  name: nodeport-example
  labels:
    service-type: nodeport
    purpose: external-access

---
# Deployment for web application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
  namespace: nodeport-example
  labels:
    app: web-app
    service-type: nodeport
spec:
  replicas: 3
  selector:
    matchLabels:
      app: web-app
      service-type: nodeport
  template:
    metadata:
      labels:
        app: web-app
        service-type: nodeport
    spec:
      containers:
      - name: web-server
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: app-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: app-content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: app-config
        configMap:
          name: web-app-config
      - name: app-content
        configMap:
          name: web-app-content

---
# NodePort Service with auto-assigned port
apiVersion: v1
kind: Service
metadata:
  name: web-app-nodeport-auto
  namespace: nodeport-example
  labels:
    app: web-app
    service-type: nodeport
    port-assignment: auto
  annotations:
    service.kubernetes.io/description: "NodePort service with auto-assigned port"
spec:
  type: NodePort
  selector:
    app: web-app
    service-type: nodeport
  ports:
  - name: http
    port: 80          # ClusterIP port
    targetPort: 80    # Pod port
    protocol: TCP
    # nodePort: auto-assigned (30000-32767 range)

---
# NodePort Service with specific port
apiVersion: v1
kind: Service
metadata:
  name: web-app-nodeport-specific
  namespace: nodeport-example
  labels:
    app: web-app
    service-type: nodeport
    port-assignment: specific
  annotations:
    service.kubernetes.io/description: "NodePort service with specific port 30080"
spec:
  type: NodePort
  selector:
    app: web-app
    service-type: nodeport
  ports:
  - name: http
    port: 80          # ClusterIP port
    targetPort: 80    # Pod port
    nodePort: 30080   # Specific NodePort (must be in 30000-32767 range)
    protocol: TCP
  sessionAffinity: None

---
# NodePort Service with multiple ports
apiVersion: v1
kind: Service
metadata:
  name: web-app-nodeport-multi
  namespace: nodeport-example
  labels:
    app: web-app
    service-type: nodeport
    port-assignment: multiple
  annotations:
    service.kubernetes.io/description: "NodePort service with multiple ports"
spec:
  type: NodePort
  selector:
    app: web-app
    service-type: nodeport
  ports:
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30081
    protocol: TCP
  - name: https
    port: 443
    targetPort: 80    # For demo, same container port
    nodePort: 30443
    protocol: TCP
  - name: api
    port: 8080
    targetPort: 80    # For demo, same container port
    nodePort: 30808
    protocol: TCP

---
# Test pod for internal access
apiVersion: v1
kind: Pod
metadata:
  name: internal-client
  namespace: nodeport-example
  labels:
    role: internal-client
spec:
  containers:
  - name: client
    image: alpine:3.18
    command: ['sleep', '3600']
    resources:
      requests:
        memory: "32Mi"
        cpu: "25m"
      limits:
        memory: "64Mi"
        cpu: "50m"

---
# ConfigMap for nginx configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: web-app-config
  namespace: nodeport-example
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;

        # Add headers to show service information
        add_header X-Service-Type "NodePort";
        add_header X-Pod-Name $hostname;
        add_header X-Node-IP $server_addr;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Node information endpoint
        location /node-info {
            access_log off;
            return 200 "{\"service_type\": \"NodePort\", \"pod\": \"$hostname\", \"server_ip\": \"$server_addr\", \"timestamp\": \"$time_iso8601\"}\n";
            add_header Content-Type application/json;
        }

        # Port information endpoint
        location /port-info {
            access_log off;
            return 200 "{\"cluster_ip_port\": 80, \"node_ports\": [30080, 30081, 30443, 30808], \"access\": \"external\"}\n";
            add_header Content-Type application/json;
        }

        # Request headers endpoint for debugging
        location /headers {
            access_log off;
            return 200 "Host: $host\nUser-Agent: $http_user_agent\nX-Forwarded-For: $http_x_forwarded_for\nX-Real-IP: $http_x_real_ip\n";
            add_header Content-Type text/plain;
        }
    }

---
# ConfigMap for web content
apiVersion: v1
kind: ConfigMap
metadata:
  name: web-app-content
  namespace: nodeport-example
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>NodePort Service Demo</title>
        <style>
            body {
                font-family: 'Arial', sans-serif;
                margin: 0;
                padding: 40px;
                background: linear-gradient(135deg, #ff7e5f 0%, #feb47b 100%);
                color: #333;
            }
            .container {
                max-width: 900px;
                margin: 0 auto;
                background: rgba(255, 255, 255, 0.95);
                padding: 30px;
                border-radius: 15px;
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            }
            .service-type {
                background: #FF5722;
                color: white;
                padding: 10px 20px;
                border-radius: 25px;
                display: inline-block;
                margin-bottom: 20px;
                font-weight: bold;
            }
            .info-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin: 20px 0;
            }
            .info-card {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 10px;
                border-left: 4px solid #FF5722;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            }
            .port-table {
                width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
                background: white;
                border-radius: 8px;
                overflow: hidden;
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            }
            .port-table th, .port-table td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }
            .port-table th {
                background: #FF5722;
                color: white;
                font-weight: bold;
            }
            .port-table tr:hover {
                background: #f5f5f5;
            }
            .endpoint {
                background: #e3f2fd;
                padding: 15px;
                border-radius: 8px;
                margin: 10px 0;
                border-left: 3px solid #2196F3;
            }
            .command {
                background: #2d3748;
                color: #e2e8f0;
                padding: 15px;
                border-radius: 8px;
                font-family: 'Courier New', monospace;
                margin: 10px 0;
                overflow-x: auto;
            }
            .access-method {
                background: #fff3e0;
                padding: 15px;
                border-radius: 8px;
                margin: 15px 0;
                border-left: 4px solid #FF9800;
            }
            .success { color: #4CAF50; font-weight: bold; }
            .warning { color: #FF9800; font-weight: bold; }
            .external { color: #FF5722; font-weight: bold; }
        </style>
        <script>
            function updateNodeInfo() {
                // Simulate getting node information
                document.getElementById('current-host').innerHTML = window.location.host || 'NodePort Service';
                document.getElementById('access-url').innerHTML = window.location.href;
            }
            window.onload = updateNodeInfo;
        </script>
    </head>
    <body>
        <div class="container">
            <div class="service-type">üåê NodePort Service</div>
            <h1>NodePort Service Demonstration</h1>
            
            <div class="info-grid">
                <div class="info-card">
                    <h3>Service Type</h3>
                    <p><strong>NodePort</strong> - External access via node IPs</p>
                </div>
                <div class="info-card">
                    <h3>Access Scope</h3>
                    <p><strong>External + Internal</strong> - Accessible from outside cluster</p>
                </div>
                <div class="info-card">
                    <h3>Port Range</h3>
                    <p><strong>30000-32767</strong> - Allocated from this range</p>
                </div>
                <div class="info-card">
                    <h3>Use Cases</h3>
                    <p><strong>Development/Testing</strong> - Simple external access</p>
                </div>
            </div>

            <h3>üîå Port Configuration</h3>
            <table class="port-table">
                <thead>
                    <tr>
                        <th>Service Name</th>
                        <th>Service Port</th>
                        <th>NodePort</th>
                        <th>Target Port</th>
                        <th>Access Method</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>web-app-nodeport-auto</td>
                        <td>80</td>
                        <td>Auto-assigned</td>
                        <td>80</td>
                        <td>&lt;NodeIP&gt;:&lt;Auto-Port&gt;</td>
                    </tr>
                    <tr>
                        <td>web-app-nodeport-specific</td>
                        <td>80</td>
                        <td>30080</td>
                        <td>80</td>
                        <td>&lt;NodeIP&gt;:30080</td>
                    </tr>
                    <tr>
                        <td>web-app-nodeport-multi</td>
                        <td>80, 443, 8080</td>
                        <td>30081, 30443, 30808</td>
                        <td>80</td>
                        <td>&lt;NodeIP&gt;:&lt;Respective-Ports&gt;</td>
                    </tr>
                </tbody>
            </table>

            <h3>üîó Access Methods</h3>
            <div class="access-method">
                <h4>1. External Access (Primary)</h4>
                <p><strong>URL Format:</strong> <code>http://&lt;NodeIP&gt;:&lt;NodePort&gt;</code></p>
                <p><strong>Current Access:</strong> <span id="current-host"></span></p>
            </div>
            
            <div class="access-method">
                <h4>2. Internal ClusterIP Access</h4>
                <p><strong>URL Format:</strong> <code>http://&lt;ServiceName&gt;:&lt;ServicePort&gt;</code></p>
                <p><strong>Example:</strong> <code>http://web-app-nodeport-specific:80</code></p>
            </div>

            <h3>üîç Available Endpoints</h3>
            <div class="endpoint">
                <strong>GET /</strong> - This landing page
            </div>
            <div class="endpoint">
                <strong>GET /health</strong> - Health check endpoint
            </div>
            <div class="endpoint">
                <strong>GET /node-info</strong> - Node and pod information (JSON)
            </div>
            <div class="endpoint">
                <strong>GET /port-info</strong> - Port configuration details (JSON)
            </div>
            <div class="endpoint">
                <strong>GET /headers</strong> - Request headers for debugging
            </div>

            <h3>üß™ Testing Commands</h3>
            
            <p><strong>1. Get Service Details:</strong></p>
            <div class="command">kubectl get services -n nodeport-example -o wide</div>
            
            <p><strong>2. Get Node IPs:</strong></p>
            <div class="command">kubectl get nodes -o wide</div>
            
            <p><strong>3. External Access Test:</strong></p>
            <div class="command">curl http://&lt;NODE-IP&gt;:30080</div>
            
            <p><strong>4. Internal Access Test:</strong></p>
            <div class="command">kubectl exec -it internal-client -n nodeport-example -- wget -qO- http://web-app-nodeport-specific</div>
            
            <p><strong>5. Multi-Port Access Test:</strong></p>
            <div class="command">curl http://&lt;NODE-IP&gt;:30081
curl http://&lt;NODE-IP&gt;:30443
curl http://&lt;NODE-IP&gt;:30808</div>
            
            <p><strong>6. Load Balancing Test:</strong></p>
            <div class="command">for i in {1..5}; do curl -s http://&lt;NODE-IP&gt;:30080/node-info | grep pod; done</div>

            <h3>üìã Key Characteristics</h3>
            <ul>
                <li class="success">‚úÖ External access from any node IP</li>
                <li class="success">‚úÖ Inherits all ClusterIP functionality</li>
                <li class="success">‚úÖ Load balancing across pods</li>
                <li class="success">‚úÖ No cloud provider dependency</li>
                <li class="warning">‚ö†Ô∏è Requires knowledge of node IPs</li>
                <li class="warning">‚ö†Ô∏è Limited port range (30000-32767)</li>
                <li class="warning">‚ö†Ô∏è Not suitable for production web apps</li>
            </ul>

            <h3>üéØ Use Cases</h3>
            <div class="info-grid">
                <div class="info-card">
                    <h4>Development</h4>
                    <p>Quick external access for testing applications during development</p>
                </div>
                <div class="info-card">
                    <h4>Legacy Applications</h4>
                    <p>Applications that need specific port access patterns</p>
                </div>
                <div class="info-card">
                    <h4>On-Premises</h4>
                    <p>Environments without cloud load balancer integration</p>
                </div>
                <div class="info-card">
                    <h4>Debugging</h4>
                    <p>Direct access to services for troubleshooting</p>
                </div>
            </div>

            <h3>‚ö†Ô∏è Production Considerations</h3>
            <p>For production workloads, consider:</p>
            <ul>
                <li><strong>LoadBalancer Services:</strong> For cloud environments</li>
                <li><strong>Ingress Controllers:</strong> For HTTP/HTTPS traffic</li>
                <li><strong>Network Load Balancers:</strong> For high-performance requirements</li>
                <li><strong>Service Mesh:</strong> For advanced traffic management</li>
            </ul>
        </div>
    </body>
    </html>