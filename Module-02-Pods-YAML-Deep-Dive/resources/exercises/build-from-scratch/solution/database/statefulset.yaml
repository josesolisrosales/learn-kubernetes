# Database StatefulSet - E-commerce Platform
# Demonstrates persistent storage, StatefulSet patterns, and database deployment
# Shows init containers, backup sidecars, and connection pooling

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: database
  namespace: ecommerce-platform
  labels:
    app: ecommerce-platform
    component: database
    tier: data
    version: v1.0.0
    managed-by: kubernetes
  annotations:
    statefulset.kubernetes.io/description: "PostgreSQL database with persistent storage and backup sidecar"
    contact.kubernetes.io/team: "database-team"
    documentation.kubernetes.io/url: "https://docs.company.com/ecommerce-database"
spec:
  serviceName: database-service
  replicas: 1  # Single instance for development
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  selector:
    matchLabels:
      app: ecommerce-platform
      component: database
      tier: data
  template:
    metadata:
      labels:
        app: ecommerce-platform
        component: database
        tier: data
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ecommerce-app-sa
      
      # Security context for the pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 999  # postgres user
        runAsGroup: 999
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      
      # Graceful shutdown for database
      terminationGracePeriodSeconds: 60
      
      # Init containers for database setup
      initContainers:
      # Initialize database directory structure
      - name: init-database-dirs
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "Initializing database directories..."
          mkdir -p /var/lib/postgresql/data
          mkdir -p /var/lib/postgresql/backup
          mkdir -p /var/lib/postgresql/logs
          mkdir -p /var/lib/postgresql/scripts
          chown -R 999:999 /var/lib/postgresql
          chmod 700 /var/lib/postgresql/data
          echo "Database directories initialized successfully!"
        
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
          subPath: data
        - name: postgres-storage
          mountPath: /var/lib/postgresql/backup
          subPath: backup
        - name: postgres-storage
          mountPath: /var/lib/postgresql/logs
          subPath: logs
        
        resources:
          requests:
            memory: "16Mi"
            cpu: "10m"
          limits:
            memory: "32Mi"
            cpu: "50m"
        
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: false  # Need root to change ownership
          runAsUser: 0
          capabilities:
            drop:
            - ALL
            add:
            - CHOWN
            - FOWNER
      
      # Database schema initialization
      - name: init-schema
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          echo "Preparing database schema initialization..."
          cat > /docker-entrypoint-initdb.d/01-schema.sql << 'EOF'
          -- E-commerce Platform Database Schema
          
          -- Users table
          CREATE TABLE IF NOT EXISTS users (
              id SERIAL PRIMARY KEY,
              name VARCHAR(100) NOT NULL,
              email VARCHAR(100) UNIQUE NOT NULL,
              role VARCHAR(50) DEFAULT 'customer',
              status VARCHAR(20) DEFAULT 'active',
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          
          -- Products table
          CREATE TABLE IF NOT EXISTS products (
              id SERIAL PRIMARY KEY,
              name VARCHAR(200) NOT NULL,
              description TEXT,
              price DECIMAL(10,2) NOT NULL,
              category VARCHAR(100),
              stock INTEGER DEFAULT 0,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          
          -- Orders table
          CREATE TABLE IF NOT EXISTS orders (
              id SERIAL PRIMARY KEY,
              user_id INTEGER REFERENCES users(id),
              total DECIMAL(10,2) NOT NULL,
              status VARCHAR(50) DEFAULT 'pending',
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          
          -- Order items table
          CREATE TABLE IF NOT EXISTS order_items (
              id SERIAL PRIMARY KEY,
              order_id INTEGER REFERENCES orders(id),
              product_id INTEGER REFERENCES products(id),
              quantity INTEGER NOT NULL,
              price DECIMAL(10,2) NOT NULL
          );
          
          -- Indexes for performance
          CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
          CREATE INDEX IF NOT EXISTS idx_products_category ON products(category);
          CREATE INDEX IF NOT EXISTS idx_orders_user_id ON orders(user_id);
          CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);
          CREATE INDEX IF NOT EXISTS idx_order_items_order_id ON order_items(order_id);
          
          EOF
          
          cat > /docker-entrypoint-initdb.d/02-data.sql << 'EOF'
          -- Initial sample data
          
          INSERT INTO users (name, email, role, status) VALUES
          ('John Doe', 'john@example.com', 'customer', 'active'),
          ('Jane Smith', 'jane@example.com', 'admin', 'active'),
          ('Bob Johnson', 'bob@example.com', 'customer', 'active'),
          ('Alice Brown', 'alice@example.com', 'customer', 'active')
          ON CONFLICT (email) DO NOTHING;
          
          INSERT INTO products (name, description, price, category, stock) VALUES
          ('Laptop', 'High-performance laptop for professionals', 999.99, 'Electronics', 50),
          ('Smartphone', 'Latest model smartphone with great camera', 699.99, 'Electronics', 100),
          ('Headphones', 'Noise-cancelling wireless headphones', 199.99, 'Audio', 75),
          ('Tablet', 'Lightweight tablet for reading and browsing', 449.99, 'Electronics', 30),
          ('Smartwatch', 'Fitness tracking smartwatch', 299.99, 'Wearables', 40)
          ON CONFLICT DO NOTHING;
          
          INSERT INTO orders (user_id, total, status) VALUES
          (1, 999.99, 'completed'),
          (2, 699.99, 'processing'),
          (3, 199.99, 'shipped'),
          (1, 449.99, 'pending')
          ON CONFLICT DO NOTHING;
          
          INSERT INTO order_items (order_id, product_id, quantity, price) VALUES
          (1, 1, 1, 999.99),
          (2, 2, 1, 699.99),
          (3, 3, 1, 199.99),
          (4, 4, 1, 449.99)
          ON CONFLICT DO NOTHING;
          
          EOF
          echo "Database schema initialization prepared!"
        
        volumeMounts:
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "100m"
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Need to write init scripts
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
      
      containers:
      # Main PostgreSQL database container
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        
        # Environment variables
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --locale=C"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        
        # Volume mounts
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
          subPath: data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
          readOnly: true
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        - name: shared-logs
          mountPath: /var/log/postgresql
        
        # Resource management
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Health checks
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h localhost"
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h localhost && psql -U $POSTGRES_USER -d $POSTGRES_DB -c 'SELECT 1'"
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Startup probe for slow database initialization
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h localhost"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 10
        
        # Graceful shutdown
        lifecycle:
          preStop:
            exec:
              command:
              - sh
              - -c
              - |
                echo "Gracefully shutting down PostgreSQL..."
                pg_ctl stop -D $PGDATA -m smart -w -t 30
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # PostgreSQL needs to write to data directory
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          capabilities:
            drop:
            - ALL
      
      # Backup sidecar container
      - name: backup-agent
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          echo "Backup agent starting..."
          while true; do
            echo "Creating database backup - $(date)"
            
            # Wait for database to be ready
            until pg_isready -h localhost -U $POSTGRES_USER -d $POSTGRES_DB; do
              echo "Waiting for database to be ready..."
              sleep 10
            done
            
            # Create backup
            BACKUP_FILE="/var/lib/postgresql/backup/backup_$(date +%Y%m%d_%H%M%S).sql"
            pg_dump -h localhost -U $POSTGRES_USER -d $POSTGRES_DB > $BACKUP_FILE
            
            if [ $? -eq 0 ]; then
              echo "Backup created successfully: $BACKUP_FILE"
              
              # Keep only last 5 backups
              cd /var/lib/postgresql/backup
              ls -t backup_*.sql | tail -n +6 | xargs -r rm
              echo "Cleaned up old backups"
            else
              echo "Backup failed!"
            fi
            
            # Wait 1 hour before next backup
            sleep 3600
          done
        
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: username
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: password
        
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/backup
          subPath: backup
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Need to write backup files
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
      
      # Connection pooler sidecar (PgBouncer simulation)
      - name: connection-pooler
        image: nginx:1.25-alpine
        ports:
        - containerPort: 6432
          name: pgbouncer
          protocol: TCP
        
        command:
        - sh
        - -c
        - |
          echo "Connection pooler starting..."
          # Simulate connection pooling with a simple TCP proxy
          while true; do
            echo "Connection pooler active - $(date)"
            echo "Active connections: $(netstat -an | grep :5432 | wc -l)"
            echo "Pool stats: max_connections=100, active=5, waiting=0"
            sleep 60
          done
        
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        
        livenessProbe:
          tcpSocket:
            port: 6432
          initialDelaySeconds: 10
          periodSeconds: 30
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 101
          capabilities:
            drop:
            - ALL
      
      # PostgreSQL Exporter for metrics
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.12.0
        ports:
        - containerPort: 9187
          name: metrics
          protocol: TCP
        
        env:
        - name: DATA_SOURCE_NAME
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: database-url
        - name: PG_EXPORTER_WEB_LISTEN_ADDRESS
          value: ":9187"
        - name: PG_EXPORTER_EXTEND_QUERY_PATH
          value: "/etc/postgres_exporter/queries.yaml"
        
        volumeMounts:
        - name: postgres-exporter-config
          mountPath: /etc/postgres_exporter
          readOnly: true
        
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9187
          initialDelaySeconds: 30
          periodSeconds: 30
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
      
      # Log collector sidecar
      - name: log-collector
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "Database log collector starting..."
          while true; do
            if [ -f /var/log/postgresql/postgresql.log ]; then
              tail -f /var/log/postgresql/postgresql.log | while read line; do
                timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                echo "[$timestamp] [DATABASE-LOG] [POD:$POD_NAME] $line"
              done &
            fi
            sleep 30
          done
        
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        
        volumeMounts:
        - name: shared-logs
          mountPath: /var/log/postgresql
          readOnly: true
        
        resources:
          requests:
            memory: "16Mi"
            cpu: "10m"
          limits:
            memory: "32Mi"
            cpu: "25m"
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
      
      # Volumes
      volumes:
      - name: postgres-config
        configMap:
          name: database-config
          defaultMode: 0644
      - name: postgres-exporter-config
        configMap:
          name: postgres-exporter-config
          defaultMode: 0644
      - name: init-scripts
        emptyDir: {}
      - name: shared-logs
        emptyDir: {}
      
      # Pod scheduling preferences
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - database
              topologyKey: kubernetes.io/hostname
      
      # Node selection for database workloads
      nodeSelector:
        kubernetes.io/os: linux
      
      # Tolerations for database nodes
      tolerations:
      - key: "node-role.kubernetes.io/database"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
  
  # Volume claim templates for persistent storage
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
      labels:
        app: ecommerce-platform
        component: database
        tier: data
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: fast-ssd  # Use appropriate storage class
      resources:
        requests:
          storage: 10Gi