# First, create the ConfigMap for volume mounting
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config-files
  labels:
    app: volume-demo
data:
  nginx.conf: |
    server {
        listen 80;
        server_name localhost;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
        
        location /config {
            return 200 "Config loaded from volume!\nTimestamp: $(date)\n";
            add_header Content-Type text/plain;
        }
        
        location /health {
            return 200 "healthy";
            add_header Content-Type text/plain;
        }
    }
  
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Volume Demo</title>
    </head>
    <body>
        <h1>Kubernetes Volume Demo</h1>
        <p>This HTML was loaded from a ConfigMap volume!</p>
        <p>Container can read files mounted from various volume types.</p>
        <ul>
            <li><a href="/config">Check config endpoint</a></li>
            <li><a href="/health">Health check</a></li>
        </ul>
    </body>
    </html>

---
# Secret for demonstrating secret volumes
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  labels:
    app: volume-demo
type: Opaque
data:
  # echo -n "super-secret-password" | base64
  database-password: c3VwZXItc2VjcmV0LXBhc3N3b3Jk
  # echo -n "my-api-key-12345" | base64  
  api-key: bXktYXBpLWtleS0xMjM0NQ==

---
# Pod demonstrating different volume types
apiVersion: v1
kind: Pod
metadata:
  name: volume-demo
  labels:
    app: volume-demo
    tier: learning
    pattern: volumes
  annotations:
    description: "Demonstrates various volume types and mounting strategies"
    learning.kubernetes.io/exercise: "volume-patterns"
spec:
  containers:
  - name: web-server
    image: nginx:1.21
    ports:
    - containerPort: 80
    
    volumeMounts:
    # Mount ConfigMap as files
    - name: config-volume
      mountPath: /etc/nginx/conf.d
      readOnly: true
    - name: html-volume
      mountPath: /usr/share/nginx/html
      readOnly: true
    
    # Mount secrets as files
    - name: secret-volume
      mountPath: /etc/secrets
      readOnly: true
    
    # Shared data volume
    - name: shared-data
      mountPath: /shared
    
    # Temporary data volume
    - name: temp-data
      mountPath: /tmp/app-data
    
    env:
    - name: CONFIG_PATH
      value: "/etc/nginx/conf.d"
    - name: SECRETS_PATH
      value: "/etc/secrets"
    
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "100m"
  
  # Data processor container
  - name: data-processor
    image: busybox:1.35
    command:
    - "/bin/sh"
    - "-c"
    - |
      echo "Data processor starting..."
      
      # Read secrets (for demonstration - don't do this in production!)
      echo "Reading secrets from volume:"
      ls -la /etc/secrets/
      
      # Write data to shared volume
      while true; do
        echo "Processing data at $(date)" >> /shared/processing.log
        echo "Temp data: $(date)" > /tmp/app-data/current-time.txt
        sleep 30
      done
    
    volumeMounts:
    - name: secret-volume
      mountPath: /etc/secrets
      readOnly: true
    - name: shared-data
      mountPath: /shared
    - name: temp-data
      mountPath: /tmp/app-data
    
    resources:
      requests:
        memory: "32Mi"
        cpu: "25m"
      limits:
        memory: "64Mi"
        cpu: "50m"
  
  volumes:
  # ConfigMap volume - configuration files
  - name: config-volume
    configMap:
      name: app-config-files
      items:
      - key: nginx.conf
        path: default.conf
  
  # ConfigMap volume - HTML content
  - name: html-volume
    configMap:
      name: app-config-files
      items:
      - key: index.html
        path: index.html
  
  # Secret volume - sensitive data
  - name: secret-volume
    secret:
      secretName: app-secrets
      defaultMode: 0400  # Read-only for owner only
  
  # EmptyDir volume - shared between containers
  - name: shared-data
    emptyDir: {}
  
  # EmptyDir volume - temporary data
  - name: temp-data
    emptyDir:
      sizeLimit: 100Mi
  
  restartPolicy: Always
