# Backend API Deployment - E-commerce Platform
# Demonstrates init containers, sidecar patterns, and advanced pod configuration

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  namespace: ecommerce-platform
  labels:
    app: ecommerce-platform
    component: backend
    tier: business-logic
    version: v1.0.0
    managed-by: kubernetes
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubernetes.io/description: "Backend API server with logging and monitoring sidecars"
    contact.kubernetes.io/team: "backend-team"
    documentation.kubernetes.io/url: "https://docs.company.com/ecommerce-backend"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0  # Ensure zero downtime
      maxSurge: 2
  selector:
    matchLabels:
      app: ecommerce-platform
      component: backend
      tier: business-logic
  template:
    metadata:
      labels:
        app: ecommerce-platform
        component: backend
        tier: business-logic
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        sidecar.istio.io/inject: "false"  # Disable service mesh for now
    spec:
      serviceAccountName: ecommerce-app-sa
      
      # Security context for the pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Graceful shutdown
      terminationGracePeriodSeconds: 45
      
      # Init containers for dependency checks and setup
      initContainers:
      # Wait for database to be ready
      - name: wait-for-database
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "Waiting for database to be ready..."
          until nc -z database-service 5432; do
            echo "Database not ready, waiting 5 seconds..."
            sleep 5
          done
          echo "Database is ready!"
        resources:
          requests:
            memory: "16Mi"
            cpu: "10m"
          limits:
            memory: "32Mi"
            cpu: "50m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
      
      # Run database migrations/setup
      - name: run-migrations
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "Running database migrations..."
          # Simulate migration scripts
          echo "CREATE TABLE IF NOT EXISTS users (id SERIAL PRIMARY KEY, name VARCHAR(100), email VARCHAR(100));" > /tmp/migration.sql
          echo "CREATE TABLE IF NOT EXISTS products (id SERIAL PRIMARY KEY, name VARCHAR(100), price DECIMAL(10,2));" >> /tmp/migration.sql
          echo "CREATE TABLE IF NOT EXISTS orders (id SERIAL PRIMARY KEY, user_id INT, total DECIMAL(10,2));" >> /tmp/migration.sql
          echo "Database migrations completed successfully!"
          
          # Create initial data file
          cat > /shared-data/initial-data.json << 'EOF'
          {
            "users": [
              {"id": 1, "name": "John Doe", "email": "john@example.com", "role": "customer", "status": "active"},
              {"id": 2, "name": "Jane Smith", "email": "jane@example.com", "role": "admin", "status": "active"},
              {"id": 3, "name": "Bob Johnson", "email": "bob@example.com", "role": "customer", "status": "active"}
            ],
            "products": [
              {"id": 1, "name": "Laptop", "price": 999.99, "category": "Electronics", "stock": 50},
              {"id": 2, "name": "Smartphone", "price": 599.99, "category": "Electronics", "stock": 100},
              {"id": 3, "name": "Headphones", "price": 199.99, "category": "Electronics", "stock": 75}
            ],
            "orders": [
              {"id": 1, "customer": "John Doe", "total": 999.99, "status": "completed", "date": "2024-01-15"},
              {"id": 2, "customer": "Jane Smith", "total": 599.99, "status": "processing", "date": "2024-01-16"},
              {"id": 3, "customer": "Bob Johnson", "total": 199.99, "status": "shipped", "date": "2024-01-17"}
            ]
          }
          EOF
          echo "Initial data created successfully!"
        
        volumeMounts:
        - name: shared-data
          mountPath: /shared-data
        
        resources:
          requests:
            memory: "32Mi"
            cpu: "20m"
          limits:
            memory: "64Mi"
            cpu: "100m"
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Need to write to shared volume
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      
      containers:
      # Main API server container
      - name: api-server
        image: nginx:1.25-alpine
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8443
          name: https
          protocol: TCP
        
        # Volume mounts
        volumeMounts:
        - name: api-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
          readOnly: true
        - name: api-content
          mountPath: /usr/share/nginx/html
          readOnly: true
        - name: shared-data
          mountPath: /app/data
          readOnly: true
        - name: shared-logs
          mountPath: /var/log/nginx
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
        - name: tmp
          mountPath: /tmp
        
        # Environment variables
        env:
        - name: SERVER_PORT
          value: "8080"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: database-url
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: api-key
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: log-level
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: environment
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        
        # Resource management
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "300m"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
            httpHeaders:
            - name: Host
              value: localhost
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /api/ready
            port: 8080
            httpHeaders:
            - name: Host
              value: localhost
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Startup probe for slow starting applications
        startupProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 10
        
        # Graceful shutdown
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                echo "Gracefully shutting down API server..."
                # Simulate graceful shutdown
                sleep 5
                nginx -s quit
                sleep 5
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 101  # nginx user
          runAsGroup: 101
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      
      # Log processing sidecar
      - name: log-processor
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "Log processor starting..."
          while true; do
            if [ -f /var/log/nginx/access.log ]; then
              tail -f /var/log/nginx/access.log | while read line; do
                timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                echo "[$timestamp] [BACKEND-ACCESS] [POD:$POD_NAME] $line"
              done &
            fi
            if [ -f /var/log/nginx/error.log ]; then
              tail -f /var/log/nginx/error.log | while read line; do
                timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
                echo "[$timestamp] [BACKEND-ERROR] [POD:$POD_NAME] $line"
              done &
            fi
            sleep 30
          done
        
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        
        volumeMounts:
        - name: shared-logs
          mountPath: /var/log/nginx
          readOnly: true
        
        resources:
          requests:
            memory: "32Mi"
            cpu: "20m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
      
      # Metrics collection sidecar
      - name: metrics-collector
        image: prom/node-exporter:v1.6.1
        ports:
        - containerPort: 9100
          name: metrics
          protocol: TCP
        
        args:
        - '--path.procfs=/host/proc'
        - '--path.sysfs=/host/sys'
        - '--path.rootfs=/host/root'
        - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
        - '--web.listen-address=:9100'
        
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        - name: root
          mountPath: /host/root
          mountPropagation: HostToContainer
          readOnly: true
        
        resources:
          requests:
            memory: "32Mi"
            cpu: "20m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9100
          initialDelaySeconds: 15
          periodSeconds: 30
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
      
      # Circuit breaker simulation container
      - name: circuit-breaker
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "Circuit breaker monitor starting..."
          while true; do
            # Simulate circuit breaker logic
            if [ -f /shared-data/circuit-breaker-state ]; then
              state=$(cat /shared-data/circuit-breaker-state)
              echo "Circuit breaker state: $state"
            else
              echo "CLOSED" > /shared-data/circuit-breaker-state
              echo "Circuit breaker initialized to CLOSED state"
            fi
            sleep 60
          done
        
        volumeMounts:
        - name: shared-data
          mountPath: /shared-data
        
        resources:
          requests:
            memory: "16Mi"
            cpu: "10m"
          limits:
            memory: "32Mi"
            cpu: "25m"
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Need to write circuit breaker state
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      
      # Volumes
      volumes:
      - name: api-config
        configMap:
          name: backend-config
          defaultMode: 0644
      - name: api-content
        configMap:
          name: backend-content
          defaultMode: 0644
      - name: shared-data
        emptyDir: {}
      - name: shared-logs
        emptyDir: {}
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      # Host volumes for metrics collection
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      - name: root
        hostPath:
          path: /
      
      # Pod scheduling and affinity
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname
        
        # Prefer to be scheduled on different nodes than frontend
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - frontend
              topologyKey: kubernetes.io/hostname
      
      # Node selection
      nodeSelector:
        kubernetes.io/os: linux
      
      # Tolerations
      tolerations:
      - key: "node-role.kubernetes.io/backend"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"