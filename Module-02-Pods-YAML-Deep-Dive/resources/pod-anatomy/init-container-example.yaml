apiVersion: v1
kind: Pod
metadata:
  name: init-demo
  labels:
    app: init-container-demo
    tier: learning
    pattern: init-containers
  annotations:
    description: "Demonstrates init containers for setup and dependency management"
    learning.kubernetes.io/exercise: "init-container-pattern"
spec:
  # Init containers run before the main containers
  initContainers:
  
  # First init container: Check if external service is ready
  - name: check-db-ready
    image: busybox:1.35
    command:
    - "sh"
    - "-c"
    - |
      echo "Checking if database service is ready..."
      
      # Simulate checking external dependency
      for i in $(seq 1 10); do
        echo "Attempt $i: Checking database connectivity..."
        
        # In real scenario, you'd check actual database
        # Here we simulate with a simple check
        if [ $i -gt 3 ]; then
          echo "Database is ready!"
          exit 0
        fi
        
        echo "Database not ready, waiting..."
        sleep 2
      done
      
      echo "Database check failed after 10 attempts"
      exit 1
    env:
    - name: DB_HOST
      value: "postgres-service"
    - name: DB_PORT
      value: "5432"
  
  # Second init container: Download configuration
  - name: download-config
    image: busybox:1.35
    command:
    - "sh"
    - "-c"
    - |
      echo "Downloading application configuration..."
      
      # Simulate downloading config files
      mkdir -p /config-data
      
      # Create application config
      cat > /config-data/app.conf << EOF
      # Application Configuration
      # Generated by init container at $(date)
      
      [database]
      host=postgres-service
      port=5432
      name=myapp
      
      [server]
      port=8080
      workers=4
      
      [logging]
      level=INFO
      format=json
      EOF
      
      # Create environment-specific config
      cat > /config-data/env.conf << EOF
      ENVIRONMENT=development
      DEBUG=true
      LOG_LEVEL=debug
      API_VERSION=v1
      EOF
      
      echo "Configuration downloaded successfully!"
      ls -la /config-data/
    volumeMounts:
    - name: config-data
      mountPath: /config-data
  
  # Third init container: Database schema setup
  - name: setup-schema
    image: busybox:1.35
    command:
    - "sh"
    - "-c"
    - |
      echo "Setting up database schema..."
      
      # Simulate database schema creation
      mkdir -p /schema-data
      
      cat > /schema-data/setup.sql << EOF
      -- Database Schema Setup
      -- Generated at $(date)
      
      CREATE TABLE IF NOT EXISTS users (
          id SERIAL PRIMARY KEY,
          username VARCHAR(50) UNIQUE NOT NULL,
          email VARCHAR(100) UNIQUE NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      
      CREATE TABLE IF NOT EXISTS posts (
          id SERIAL PRIMARY KEY,
          title VARCHAR(200) NOT NULL,
          content TEXT,
          user_id INTEGER REFERENCES users(id),
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      
      -- Insert sample data
      INSERT INTO users (username, email) VALUES 
      ('admin', 'admin@example.com'),
      ('demo', 'demo@example.com');
      EOF
      
      echo "Schema setup completed!"
      echo "Setup status: SUCCESS" > /shared-data/init-status.txt
    volumeMounts:
    - name: schema-data
      mountPath: /schema-data
    - name: shared-data
      mountPath: /shared-data
  
  # Main application containers start only after ALL init containers succeed
  containers:
  - name: main-app
    image: nginx:1.21
    ports:
    - containerPort: 80
    
    # Main app can use data prepared by init containers
    volumeMounts:
    - name: config-data
      mountPath: /etc/app-config
      readOnly: true
    - name: schema-data
      mountPath: /etc/schema
      readOnly: true
    - name: shared-data
      mountPath: /shared-data
      readOnly: true
    - name: app-html
      mountPath: /usr/share/nginx/html
    
    env:
    - name: CONFIG_PATH
      value: "/etc/app-config"
    - name: INIT_STATUS_FILE
      value: "/shared-data/init-status.txt"
    
    # Health check that verifies init containers completed
    livenessProbe:
      exec:
        command:
        - sh
        - -c
        - |
          if [ -f /shared-data/init-status.txt ]; then
            if grep -q "SUCCESS" /shared-data/init-status.txt; then
              exit 0
            fi
          fi
          exit 1
      initialDelaySeconds: 10
      periodSeconds: 30
    
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "100m"
  
  # Monitoring sidecar
  - name: monitor
    image: busybox:1.35
    command:
    - "sh"
    - "-c"
    - |
      echo "Monitor container starting..."
      
      # Wait for main app to be ready
      while [ ! -f /shared-data/init-status.txt ]; do
        echo "Waiting for initialization to complete..."
        sleep 5
      done
      
      echo "Initialization complete, starting monitoring..."
      
      while true; do
        echo "Monitor check at $(date)"
        echo "App config files:"
        ls -la /etc/app-config/ || echo "No config files"
        echo "Init status: $(cat /shared-data/init-status.txt 2>/dev/null || echo 'No status file')"
        sleep 60
      done
    
    volumeMounts:
    - name: config-data
      mountPath: /etc/app-config
      readOnly: true
    - name: shared-data
      mountPath: /shared-data
      readOnly: true
    
    resources:
      requests:
        memory: "32Mi"
        cpu: "25m"
      limits:
        memory: "64Mi"
        cpu: "50m"
  
  volumes:
  # Persistent configuration from init containers
  - name: config-data
    emptyDir: {}
  
  # Database schema files
  - name: schema-data
    emptyDir: {}
  
  # Shared data between init and main containers
  - name: shared-data
    emptyDir: {}
  
  # HTML content for nginx
  - name: app-html
    configMap:
      name: init-demo-html
      optional: true
  
  restartPolicy: Always

---
# ConfigMap for HTML content
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-demo-html
  labels:
    app: init-container-demo
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Init Container Demo</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            .status { padding: 10px; background: #e8f5e8; border-radius: 5px; }
        </style>
    </head>
    <body>
        <h1>Init Container Demo</h1>
        <div class="status">
            <h2>âœ… Initialization Complete!</h2>
            <p>This application started successfully because all init containers completed:</p>
            <ol>
                <li><strong>check-db-ready</strong>: Verified database connectivity</li>
                <li><strong>download-config</strong>: Downloaded application configuration</li>
                <li><strong>setup-schema</strong>: Initialized database schema</li>
            </ol>
        </div>
        
        <h3>Key Learning Points:</h3>
        <ul>
            <li>Init containers run sequentially before main containers</li>
            <li>Main containers only start if ALL init containers succeed</li>
            <li>Init containers can prepare data and verify dependencies</li>
            <li>Volumes can be shared between init and main containers</li>
        </ul>
        
        <p><em>Check the pod logs to see the initialization sequence!</em></p>
    </body>
    </html>
