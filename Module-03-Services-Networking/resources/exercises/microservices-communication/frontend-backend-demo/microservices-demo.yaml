# Frontend-Backend Microservices Communication Demo
# Demonstrates realistic microservices architecture with service discovery
# Shows API Gateway pattern, load balancing, and inter-service communication

---
# Namespace for microservices demo
apiVersion: v1
kind: Namespace
metadata:
  name: microservices-demo
  labels:
    purpose: microservices-communication
    architecture: distributed
    environment: development

---
# API Gateway Deployment (Entry point for all requests)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: microservices-demo
  labels:
    app: api-gateway
    tier: gateway
    component: proxy
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        tier: gateway
        component: proxy
    spec:
      containers:
      - name: gateway
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: gateway-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: gateway-content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: gateway-config
        configMap:
          name: api-gateway-config
      - name: gateway-content
        configMap:
          name: api-gateway-content

---
# Frontend Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-service
  namespace: microservices-demo
  labels:
    app: frontend-service
    tier: presentation
    component: web-ui
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend-service
  template:
    metadata:
      labels:
        app: frontend-service
        tier: presentation
        component: web-ui
    spec:
      containers:
      - name: frontend
        image: nginx:1.25-alpine
        ports:
        - containerPort: 3000
          name: http
        volumeMounts:
        - name: frontend-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: frontend-content
          mountPath: /usr/share/nginx/html
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: frontend-config
        configMap:
          name: frontend-config
      - name: frontend-content
        configMap:
          name: frontend-content

---
# User Service Deployment (Microservice 1)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: microservices-demo
  labels:
    app: user-service
    tier: business-logic
    component: user-management
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
        tier: business-logic
        component: user-management
    spec:
      containers:
      - name: user-api
        image: nginx:1.25-alpine
        ports:
        - containerPort: 8081
          name: http
        volumeMounts:
        - name: user-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /users/health
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /users/health
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: user-config
        configMap:
          name: user-service-config

---
# Product Service Deployment (Microservice 2)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
  namespace: microservices-demo
  labels:
    app: product-service
    tier: business-logic
    component: product-catalog
spec:
  replicas: 3
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
        tier: business-logic
        component: product-catalog
    spec:
      containers:
      - name: product-api
        image: nginx:1.25-alpine
        ports:
        - containerPort: 8082
          name: http
        volumeMounts:
        - name: product-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /products/health
            port: 8082
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /products/health
            port: 8082
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: product-config
        configMap:
          name: product-service-config

---
# Order Service Deployment (Microservice 3)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: microservices-demo
  labels:
    app: order-service
    tier: business-logic
    component: order-processing
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
        tier: business-logic
        component: order-processing
    spec:
      containers:
      - name: order-api
        image: nginx:1.25-alpine
        ports:
        - containerPort: 8083
          name: http
        volumeMounts:
        - name: order-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /orders/health
            port: 8083
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /orders/health
            port: 8083
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: order-config
        configMap:
          name: order-service-config

---
# Services for microservices communication
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: microservices-demo
  labels:
    app: api-gateway
    tier: gateway
spec:
  type: LoadBalancer
  selector:
    app: api-gateway
  ports:
  - name: http
    port: 80
    targetPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: microservices-demo
  labels:
    app: frontend-service
    tier: presentation
spec:
  type: ClusterIP
  selector:
    app: frontend-service
  ports:
  - name: http
    port: 3000
    targetPort: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: microservices-demo
  labels:
    app: user-service
    tier: business-logic
spec:
  type: ClusterIP
  selector:
    app: user-service
  ports:
  - name: http
    port: 8081
    targetPort: 8081

---
apiVersion: v1
kind: Service
metadata:
  name: product-service
  namespace: microservices-demo
  labels:
    app: product-service
    tier: business-logic
spec:
  type: ClusterIP
  selector:
    app: product-service
  ports:
  - name: http
    port: 8082
    targetPort: 8082

---
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: microservices-demo
  labels:
    app: order-service
    tier: business-logic
spec:
  type: ClusterIP
  selector:
    app: order-service
  ports:
  - name: http
    port: 8083
    targetPort: 8083

---
# Headless services for direct pod access (useful for debugging)
apiVersion: v1
kind: Service
metadata:
  name: user-service-headless
  namespace: microservices-demo
  labels:
    app: user-service
    service-type: headless
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: user-service
  ports:
  - name: http
    port: 8081
    targetPort: 8081

---
# Test pod for microservices communication testing
apiVersion: v1
kind: Pod
metadata:
  name: microservices-test-pod
  namespace: microservices-demo
  labels:
    app: test-pod
    role: debugging
spec:
  containers:
  - name: test-tools
    image: nicolaka/netshoot:v0.11
    command: ['sleep', '3600']
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "100m"

---
# ConfigMap for API Gateway
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
  namespace: microservices-demo
data:
  default.conf: |
    # API Gateway Configuration
    upstream frontend_upstream {
        server frontend-service:3000;
        keepalive 32;
    }
    
    upstream user_upstream {
        server user-service:8081;
        keepalive 16;
    }
    
    upstream product_upstream {
        server product-service:8082;
        keepalive 16;
    }
    
    upstream order_upstream {
        server order-service:8083;
        keepalive 16;
    }
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    
    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        
        # Custom headers
        add_header X-Service-Type "API-Gateway" always;
        add_header X-Pod-Name $hostname always;
        add_header X-Gateway-Version "v1.0.0" always;
        
        # Enable CORS for frontend communication
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        
        # Handle OPTIONS requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain; charset=utf-8';
            add_header Content-Length 0;
            return 204;
        }
        
        # Frontend routes
        location / {
            proxy_pass http://frontend_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header X-Routed-To "frontend-service" always;
        }
        
        # User service routes
        location /api/users {
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://user_upstream/users;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header X-Routed-To "user-service" always;
        }
        
        # Product service routes
        location /api/products {
            limit_req zone=api burst=10 nodelay;
            proxy_pass http://product_upstream/products;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header X-Routed-To "product-service" always;
        }
        
        # Order service routes
        location /api/orders {
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://order_upstream/orders;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            add_header X-Routed-To "order-service" always;
        }
        
        # Gateway health check
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"api-gateway","version":"v1.0.0","timestamp":"$time_iso8601","upstream_services":{"frontend":"frontend-service:3000","users":"user-service:8081","products":"product-service:8082","orders":"order-service:8083"}}';
            add_header Content-Type application/json;
        }
        
        # Gateway info endpoint
        location /gateway/info {
            access_log off;
            return 200 '{"service":"api-gateway","version":"v1.0.0","routes":[{"path":"/","target":"frontend-service:3000"},{"path":"/api/users","target":"user-service:8081"},{"path":"/api/products","target":"product-service:8082"},{"path":"/api/orders","target":"order-service:8083"}],"load_balancing":"round_robin","rate_limiting":"10req/s"}';
            add_header Content-Type application/json;
        }
        
        # Service discovery endpoint
        location /gateway/services {
            access_log off;
            return 200 '{"discovered_services":[{"name":"frontend-service","namespace":"microservices-demo","port":3000,"health":"healthy"},{"name":"user-service","namespace":"microservices-demo","port":8081,"health":"healthy"},{"name":"product-service","namespace":"microservices-demo","port":8082,"health":"healthy"},{"name":"order-service","namespace":"microservices-demo","port":8083,"health":"healthy"}]}';
            add_header Content-Type application/json;
        }
    }

---
# ConfigMap for Frontend Service
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: microservices-demo
data:
  default.conf: |
    server {
        listen 3000;
        server_name _;
        
        add_header X-Service-Type "Frontend" always;
        add_header X-Pod-Name $hostname always;
        
        root /usr/share/nginx/html;
        index index.html;
        
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"frontend","port":3000,"timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # Static assets caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

---
# ConfigMap for User Service
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-service-config
  namespace: microservices-demo
data:
  default.conf: |
    server {
        listen 8081;
        server_name _;
        
        add_header X-Service-Type "User-Service" always;
        add_header X-Pod-Name $hostname always;
        add_header X-Microservice "users" always;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        
        location /users/health {
            access_log off;
            return 200 '{"status":"healthy","service":"user-service","port":8081,"database":"connected","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        location /users {
            if ($request_method = GET) {
                return 200 '{"users":[{"id":1,"name":"John Doe","email":"john@example.com","role":"customer"},{"id":2,"name":"Jane Smith","email":"jane@example.com","role":"admin"},{"id":3,"name":"Bob Johnson","email":"bob@example.com","role":"customer"}],"total":3,"service":"user-service","pod":"$hostname"}';
                add_header Content-Type application/json;
            }
            
            if ($request_method = POST) {
                return 201 '{"message":"User created","id":4,"service":"user-service","pod":"$hostname","timestamp":"$time_iso8601"}';
                add_header Content-Type application/json;
            }
        }
        
        location /users/profile {
            return 200 '{"profile":{"id":1,"name":"Current User","preferences":{"theme":"dark","notifications":true}},"service":"user-service","pod":"$hostname"}';
            add_header Content-Type application/json;
        }
        
        location / {
            return 200 '{"service":"user-service","version":"v1.0.0","endpoints":["/users","/users/profile","/users/health"],"pod":"$hostname"}';
            add_header Content-Type application/json;
        }
    }

---
# ConfigMap for Product Service
apiVersion: v1
kind: ConfigMap
metadata:
  name: product-service-config
  namespace: microservices-demo
data:
  default.conf: |
    server {
        listen 8082;
        server_name _;
        
        add_header X-Service-Type "Product-Service" always;
        add_header X-Pod-Name $hostname always;
        add_header X-Microservice "products" always;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        
        location /products/health {
            access_log off;
            return 200 '{"status":"healthy","service":"product-service","port":8082,"inventory":"connected","search_index":"ready","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        location /products {
            if ($request_method = GET) {
                return 200 '{"products":[{"id":1,"name":"Laptop","price":999.99,"category":"Electronics","stock":25},{"id":2,"name":"Smartphone","price":699.99,"category":"Electronics","stock":50},{"id":3,"name":"Headphones","price":199.99,"category":"Audio","stock":100},{"id":4,"name":"Tablet","price":449.99,"category":"Electronics","stock":30}],"total":4,"service":"product-service","pod":"$hostname"}';
                add_header Content-Type application/json;
            }
            
            if ($request_method = POST) {
                return 201 '{"message":"Product created","id":5,"service":"product-service","pod":"$hostname","timestamp":"$time_iso8601"}';
                add_header Content-Type application/json;
            }
        }
        
        location /products/featured {
            return 200 '{"featured_products":[{"id":1,"name":"Laptop","price":999.99,"discount":"10%"},{"id":2,"name":"Smartphone","price":699.99,"discount":"15%"}],"service":"product-service","pod":"$hostname"}';
            add_header Content-Type application/json;
        }
        
        location /products/search {
            return 200 '{"search_results":[{"id":1,"name":"Laptop","relevance":0.95}],"query":"$arg_q","service":"product-service","pod":"$hostname"}';
            add_header Content-Type application/json;
        }
        
        location / {
            return 200 '{"service":"product-service","version":"v1.0.0","endpoints":["/products","/products/featured","/products/search","/products/health"],"pod":"$hostname"}';
            add_header Content-Type application/json;
        }
    }

---
# ConfigMap for Order Service
apiVersion: v1
kind: ConfigMap
metadata:
  name: order-service-config
  namespace: microservices-demo
data:
  default.conf: |
    server {
        listen 8083;
        server_name _;
        
        add_header X-Service-Type "Order-Service" always;
        add_header X-Pod-Name $hostname always;
        add_header X-Microservice "orders" always;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        
        location /orders/health {
            access_log off;
            return 200 '{"status":"healthy","service":"order-service","port":8083,"payment_gateway":"connected","inventory":"synced","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        location /orders {
            if ($request_method = GET) {
                return 200 '{"orders":[{"id":1,"user_id":1,"total":999.99,"status":"completed","items":[{"product_id":1,"quantity":1}]},{"id":2,"user_id":2,"total":699.99,"status":"processing","items":[{"product_id":2,"quantity":1}]},{"id":3,"user_id":1,"total":199.99,"status":"shipped","items":[{"product_id":3,"quantity":1}]}],"total":3,"service":"order-service","pod":"$hostname"}';
                add_header Content-Type application/json;
            }
            
            if ($request_method = POST) {
                return 201 '{"message":"Order created","order_id":4,"total":449.99,"status":"pending","service":"order-service","pod":"$hostname","timestamp":"$time_iso8601"}';
                add_header Content-Type application/json;
            }
        }
        
        # Inter-service communication simulation
        location /orders/validate {
            # Simulate calling user-service and product-service
            return 200 '{"validation_result":"valid","user_check":"user-service:verified","product_check":"product-service:in_stock","service":"order-service","pod":"$hostname"}';
            add_header Content-Type application/json;
        }
        
        location / {
            return 200 '{"service":"order-service","version":"v1.0.0","endpoints":["/orders","/orders/validate","/orders/health"],"dependencies":["user-service","product-service"],"pod":"$hostname"}';
            add_header Content-Type application/json;
        }
    }

---
# ConfigMap for API Gateway Content
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-content
  namespace: microservices-demo
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Microservices API Gateway</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                background: rgba(255, 255, 255, 0.1);
                padding: 30px;
                border-radius: 15px;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            }
            .gateway-type {
                background: #e17055;
                padding: 10px 20px;
                border-radius: 25px;
                display: inline-block;
                margin-bottom: 20px;
                font-weight: bold;
            }
            .service-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin: 20px 0;
            }
            .service-card {
                background: rgba(255, 255, 255, 0.2);
                padding: 20px;
                border-radius: 10px;
                border-left: 4px solid #e17055;
            }
            .test-button {
                background: #e17055;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                cursor: pointer;
                margin: 5px;
                font-size: 12px;
            }
            .test-button:hover {
                background: #d63031;
            }
            .test-result {
                background: rgba(0, 0, 0, 0.3);
                padding: 15px;
                border-radius: 8px;
                margin: 10px 0;
                font-family: monospace;
                font-size: 12px;
                max-height: 300px;
                overflow-y: auto;
            }
            .route-table {
                width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
                background: rgba(255, 255, 255, 0.9);
                color: #333;
                border-radius: 10px;
                overflow: hidden;
            }
            .route-table th, .route-table td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }
            .route-table th {
                background: #e17055;
                color: white;
                font-weight: bold;
            }
        </style>
        <script>
            function testService(endpoint, resultId) {
                const resultDiv = document.getElementById(resultId);
                resultDiv.style.display = 'block';
                resultDiv.innerHTML = 'Testing microservice...';
                
                fetch(endpoint)
                    .then(response => response.json())
                    .then(data => {
                        resultDiv.innerHTML = JSON.stringify(data, null, 2);
                    })
                    .catch(error => {
                        resultDiv.innerHTML = 'Error: ' + error.message;
                    });
            }
        </script>
    </head>
    <body>
        <div class="container">
            <div class="gateway-type">🚪 API Gateway</div>
            <h1>Microservices Communication Demo</h1>
            
            <h2>🏗️ Architecture Overview</h2>
            <div class="service-grid">
                <div class="service-card">
                    <h3>🚪 API Gateway</h3>
                    <p>Entry point for all requests</p>
                    <p><strong>Port:</strong> 80</p>
                    <p><strong>Features:</strong> Routing, Rate limiting, CORS</p>
                </div>
                
                <div class="service-card">
                    <h3>🎨 Frontend Service</h3>
                    <p>User interface and web application</p>
                    <p><strong>Port:</strong> 3000</p>
                    <p><strong>Type:</strong> Static content server</p>
                </div>
                
                <div class="service-card">
                    <h3>👥 User Service</h3>
                    <p>User management and authentication</p>
                    <p><strong>Port:</strong> 8081</p>
                    <p><strong>Endpoints:</strong> /users, /users/profile</p>
                </div>
                
                <div class="service-card">
                    <h3>📦 Product Service</h3>
                    <p>Product catalog and inventory</p>
                    <p><strong>Port:</strong> 8082</p>
                    <p><strong>Endpoints:</strong> /products, /products/search</p>
                </div>
                
                <div class="service-card">
                    <h3>🛒 Order Service</h3>
                    <p>Order processing and management</p>
                    <p><strong>Port:</strong> 8083</p>
                    <p><strong>Endpoints:</strong> /orders, /orders/validate</p>
                </div>
            </div>
            
            <h2>🗺️ API Routes</h2>
            <table class="route-table">
                <thead>
                    <tr>
                        <th>Route</th>
                        <th>Target Service</th>
                        <th>Method</th>
                        <th>Description</th>
                        <th>Test</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>/api/users</td>
                        <td>user-service:8081</td>
                        <td>GET</td>
                        <td>List all users</td>
                        <td><button class="test-button" onclick="testService('/api/users', 'users-result')">Test</button></td>
                    </tr>
                    <tr>
                        <td>/api/products</td>
                        <td>product-service:8082</td>
                        <td>GET</td>
                        <td>List all products</td>
                        <td><button class="test-button" onclick="testService('/api/products', 'products-result')">Test</button></td>
                    </tr>
                    <tr>
                        <td>/api/orders</td>
                        <td>order-service:8083</td>
                        <td>GET</td>
                        <td>List all orders</td>
                        <td><button class="test-button" onclick="testService('/api/orders', 'orders-result')">Test</button></td>
                    </tr>
                    <tr>
                        <td>/gateway/info</td>
                        <td>api-gateway</td>
                        <td>GET</td>
                        <td>Gateway information</td>
                        <td><button class="test-button" onclick="testService('/gateway/info', 'gateway-result')">Test</button></td>
                    </tr>
                </tbody>
            </table>
            
            <div id="users-result" class="test-result" style="display: none;"></div>
            <div id="products-result" class="test-result" style="display: none;"></div>
            <div id="orders-result" class="test-result" style="display: none;"></div>
            <div id="gateway-result" class="test-result" style="display: none;"></div>
            
            <h2>🔄 Service Communication Flow</h2>
            <pre style="background: rgba(0,0,0,0.3); padding: 20px; border-radius: 8px; font-family: monospace;">
Client Request
    ↓
API Gateway (Load Balancer + Router)
    ↓
Frontend Service (Static UI)
    ↓
API Gateway Routes:
    ├── /api/users    → User Service
    ├── /api/products → Product Service  
    └── /api/orders   → Order Service
                           ↓
                    Inter-service calls:
                    Order Service → User Service (validation)
                    Order Service → Product Service (inventory)
            </pre>
            
            <h2>🧪 Testing Commands</h2>
            <pre style="background: rgba(0,0,0,0.3); padding: 20px; border-radius: 8px; font-family: monospace; font-size: 12px;">
# Test service discovery
kubectl exec -it microservices-test-pod -n microservices-demo -- nslookup user-service
kubectl exec -it microservices-test-pod -n microservices-demo -- nslookup product-service
kubectl exec -it microservices-test-pod -n microservices-demo -- nslookup order-service

# Test inter-service communication
kubectl exec -it microservices-test-pod -n microservices-demo -- curl http://user-service:8081/users
kubectl exec -it microservices-test-pod -n microservices-demo -- curl http://product-service:8082/products
kubectl exec -it microservices-test-pod -n microservices-demo -- curl http://order-service:8083/orders

# Test via API Gateway
kubectl exec -it microservices-test-pod -n microservices-demo -- curl http://api-gateway/api/users
kubectl exec -it microservices-test-pod -n microservices-demo -- curl http://api-gateway/gateway/services

# Load testing
kubectl exec -it microservices-test-pod -n microservices-demo -- sh -c '
for i in {1..10}; do
  curl -s http://api-gateway/api/products | grep pod
  sleep 1
done'
            </pre>
            
            <h2>📊 Service Health Checks</h2>
            <button class="test-button" onclick="testService('/health', 'gateway-health')">Gateway Health</button>
            <button class="test-button" onclick="testService('/api/users', 'user-health')">Users Health</button>
            <button class="test-button" onclick="testService('/api/products', 'product-health')">Products Health</button>
            <button class="test-button" onclick="testService('/api/orders', 'order-health')">Orders Health</button>
            
            <div id="gateway-health" class="test-result" style="display: none;"></div>
            <div id="user-health" class="test-result" style="display: none;"></div>
            <div id="product-health" class="test-result" style="display: none;"></div>
            <div id="order-health" class="test-result" style="display: none;"></div>
        </div>
    </body>
    </html>

---
# ConfigMap for Frontend Content
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-content
  namespace: microservices-demo
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Microservices Frontend</title>
        <style>
            body { font-family: Arial; background: #f0f2f5; padding: 20px; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
            .microservice { background: #e3f2fd; padding: 15px; margin: 10px 0; border-radius: 5px; }
            button { background: #1976d2; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin: 5px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🎨 Frontend Microservice</h1>
            <p>This is the frontend service in our microservices architecture.</p>
            
            <div class="microservice">
                <h3>Connected Microservices</h3>
                <ul>
                    <li>👥 User Service - User management</li>
                    <li>📦 Product Service - Product catalog</li>
                    <li>🛒 Order Service - Order processing</li>
                </ul>
            </div>
            
            <h3>Service Communication</h3>
            <p>This frontend communicates with backend microservices through the API Gateway using service discovery.</p>
            
            <button onclick="alert('Frontend service running on port 3000')">Service Info</button>
        </div>
    </body>
    </html>