# Path-Based Routing Ingress Example
# Demonstrates how to route different URL paths to different backend services
# Shows API Gateway pattern with path-based service routing
# Includes examples of exact vs prefix path matching

---
# Namespace for path-based routing demonstration
apiVersion: v1
kind: Namespace
metadata:
  name: path-routing-demo
  labels:
    purpose: path-based-routing
    ingress-pattern: api-gateway

---
# Frontend application deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-app
  namespace: path-routing-demo
  labels:
    app: frontend-app
    tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend-app
  template:
    metadata:
      labels:
        app: frontend-app
        tier: frontend
    spec:
      containers:
      - name: web-server
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: app-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: app-content
          mountPath: /usr/share/nginx/html
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /health
            port: 80
        livenessProbe:
          httpGet:
            path: /health
            port: 80
      volumes:
      - name: app-config
        configMap:
          name: frontend-config
      - name: app-content
        configMap:
          name: frontend-content

---
# API service deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-service
  namespace: path-routing-demo
  labels:
    app: api-service
    tier: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api-service
  template:
    metadata:
      labels:
        app: api-service
        tier: backend
    spec:
      containers:
      - name: api-server
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: api-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: api-content
          mountPath: /usr/share/nginx/html
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /api/health
            port: 80
        livenessProbe:
          httpGet:
            path: /api/health
            port: 80
      volumes:
      - name: api-config
        configMap:
          name: api-config
      - name: api-content
        configMap:
          name: api-content

---
# Admin service deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-service
  namespace: path-routing-demo
  labels:
    app: admin-service
    tier: admin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admin-service
  template:
    metadata:
      labels:
        app: admin-service
        tier: admin
    spec:
      containers:
      - name: admin-server
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: admin-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: admin-content
          mountPath: /usr/share/nginx/html
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /admin/health
            port: 80
        livenessProbe:
          httpGet:
            path: /admin/health
            port: 80
      volumes:
      - name: admin-config
        configMap:
          name: admin-config
      - name: admin-content
        configMap:
          name: admin-content

---
# Services for each application
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: path-routing-demo
  labels:
    app: frontend-app
spec:
  type: ClusterIP
  selector:
    app: frontend-app
  ports:
  - name: http
    port: 80
    targetPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: api-service
  namespace: path-routing-demo
  labels:
    app: api-service
spec:
  type: ClusterIP
  selector:
    app: api-service
  ports:
  - name: http
    port: 80
    targetPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: admin-service
  namespace: path-routing-demo
  labels:
    app: admin-service
spec:
  type: ClusterIP
  selector:
    app: admin-service
  ports:
  - name: http
    port: 80
    targetPort: 80

---
# Path-Based Routing Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: path-based-routing
  namespace: path-routing-demo
  labels:
    purpose: path-routing
  annotations:
    # Nginx specific annotations for path routing
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
    # Add custom headers to identify the routing
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Ingress-Pattern "Path-Based-Routing" always;
      add_header X-Matched-Path "$uri" always;
spec:
  ingressClassName: nginx
  rules:
  - host: app.local
    http:
      paths:
      # Frontend - catch all remaining paths (must be last)
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
      # API routes - specific prefix matching
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: api-service
            port:
              number: 80
      # Admin routes - specific prefix matching
      - path: /admin
        pathType: Prefix
        backend:
          service:
            name: admin-service
            port:
              number: 80
      # Exact path matching example
      - path: /health
        pathType: Exact
        backend:
          service:
            name: frontend-service
            port:
              number: 80

---
# Advanced Path-Based Routing with URL Rewriting
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: advanced-path-routing
  namespace: path-routing-demo
  labels:
    purpose: advanced-path-routing
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    # Rewrite rules for different paths
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Ingress-Pattern "Advanced-Path-Routing-Rewrite" always;
      add_header X-Original-URI "$request_uri" always;
      add_header X-Rewritten-URI "$uri" always;
spec:
  ingressClassName: nginx
  rules:
  - host: advanced.local
    http:
      paths:
      # API v1 routes with rewriting
      - path: /v1/api(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: api-service
            port:
              number: 80
      # API v2 routes (same backend, different path)
      - path: /v2/api(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: api-service
            port:
              number: 80
      # Admin panel with rewriting
      - path: /panel(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: admin-service
            port:
              number: 80
      # Static assets (exact matching)
      - path: /static
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
      # Default catch-all
      - path: /(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: frontend-service
            port:
              number: 80

---
# Test client pod
apiVersion: v1
kind: Pod
metadata:
  name: path-test-client
  namespace: path-routing-demo
  labels:
    role: test-client
spec:
  containers:
  - name: client
    image: alpine:3.18
    command: 
    - sh
    - -c
    - |
      apk add --no-cache curl
      sleep 3600
    resources:
      requests:
        memory: "32Mi"
        cpu: "25m"

---
# ConfigMap for frontend nginx configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: path-routing-demo
data:
  default.conf: |
    server {
        listen 80;
        server_name _;

        add_header X-Service-Type "Frontend" always;
        add_header X-Pod-Name $hostname always;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }

        location /health {
            access_log off;
            return 200 "frontend-healthy\n";
            add_header Content-Type text/plain;
        }

        location /service-info {
            access_log off;
            return 200 "{\"service\": \"frontend\", \"pod\": \"$hostname\", \"path\": \"$uri\"}\n";
            add_header Content-Type application/json;
        }
    }

---
# ConfigMap for API nginx configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
  namespace: path-routing-demo
data:
  default.conf: |
    server {
        listen 80;
        server_name _;

        add_header X-Service-Type "API" always;
        add_header X-Pod-Name $hostname always;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }

        location /api/health {
            access_log off;
            return 200 "api-healthy\n";
            add_header Content-Type text/plain;
        }

        location ~ ^/api/(.*)$ {
            access_log off;
            return 200 "{\"service\": \"api\", \"endpoint\": \"$1\", \"pod\": \"$hostname\", \"method\": \"$request_method\"}\n";
            add_header Content-Type application/json;
        }

        # Handle rewritten paths from advanced routing
        location ~ ^/(.*)$ {
            access_log off;
            return 200 "{\"service\": \"api\", \"rewritten_path\": \"$1\", \"pod\": \"$hostname\", \"original_uri\": \"$http_x_original_uri\"}\n";
            add_header Content-Type application/json;
        }
    }

---
# ConfigMap for Admin nginx configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: admin-config
  namespace: path-routing-demo
data:
  default.conf: |
    server {
        listen 80;
        server_name _;

        add_header X-Service-Type "Admin" always;
        add_header X-Pod-Name $hostname always;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }

        location /admin/health {
            access_log off;
            return 200 "admin-healthy\n";
            add_header Content-Type text/plain;
        }

        location ~ ^/admin/(.*)$ {
            access_log off;
            return 200 "{\"service\": \"admin\", \"admin_path\": \"$1\", \"pod\": \"$hostname\", \"access_level\": \"restricted\"}\n";
            add_header Content-Type application/json;
        }

        # Handle rewritten paths from advanced routing (/panel -> /admin)
        location ~ ^/(.*)$ {
            access_log off;
            return 200 "{\"service\": \"admin\", \"rewritten_from_panel\": \"$1\", \"pod\": \"$hostname\"}\n";
            add_header Content-Type application/json;
        }
    }

---
# ConfigMap for frontend content
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-content
  namespace: path-routing-demo
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Path-Based Routing Demo</title>
        <style>
            body {
                font-family: 'Arial', sans-serif;
                margin: 0;
                padding: 40px;
                background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 1200px;
                margin: 0 auto;
                background: rgba(255, 255, 255, 0.1);
                padding: 40px;
                border-radius: 20px;
                backdrop-filter: blur(15px);
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            }
            .service-type {
                background: #00b894;
                padding: 12px 24px;
                border-radius: 30px;
                display: inline-block;
                margin-bottom: 30px;
                font-weight: bold;
                font-size: 1.1em;
            }
            .path-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 25px;
                margin: 30px 0;
            }
            .path-card {
                background: rgba(255, 255, 255, 0.15);
                padding: 25px;
                border-radius: 15px;
                border-left: 5px solid #00b894;
                transition: transform 0.3s ease;
            }
            .path-card:hover {
                transform: translateY(-5px);
            }
            .routing-table {
                width: 100%;
                border-collapse: collapse;
                margin: 25px 0;
                background: rgba(255, 255, 255, 0.9);
                color: #333;
                border-radius: 10px;
                overflow: hidden;
                box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
            }
            .routing-table th, .routing-table td {
                padding: 15px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }
            .routing-table th {
                background: #00b894;
                color: white;
                font-weight: bold;
            }
            .routing-table tr:hover {
                background: #f5f5f5;
            }
            .test-section {
                background: rgba(255, 255, 255, 0.1);
                padding: 25px;
                border-radius: 12px;
                margin: 25px 0;
                border-top: 3px solid #fdcb6e;
            }
            .command {
                background: #2d3436;
                color: #ddd;
                padding: 20px;
                border-radius: 10px;
                font-family: 'Courier New', monospace;
                margin: 15px 0;
                overflow-x: auto;
                border-left: 4px solid #fdcb6e;
            }
            .test-button {
                background: #00b894;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                cursor: pointer;
                margin: 5px;
                font-size: 14px;
            }
            .test-button:hover {
                background: #00a085;
            }
            .test-result {
                background: rgba(0, 0, 0, 0.3);
                padding: 15px;
                border-radius: 8px;
                margin: 15px 0;
                font-family: monospace;
                font-size: 14px;
                max-height: 300px;
                overflow-y: auto;
            }
            .path-type {
                display: inline-block;
                padding: 4px 8px;
                border-radius: 4px;
                font-size: 12px;
                font-weight: bold;
            }
            .prefix { background: #74b9ff; color: white; }
            .exact { background: #fd79a8; color: white; }
            .regex { background: #fdcb6e; color: #333; }
        </style>
        <script>
            function testPath(path, resultId) {
                const resultDiv = document.getElementById(resultId);
                resultDiv.innerHTML = 'Testing...';
                resultDiv.style.display = 'block';
                
                fetch(path)
                    .then(response => {
                        const headers = {};
                        response.headers.forEach((value, key) => {
                            headers[key] = value;
                        });
                        return response.text().then(text => ({
                            status: response.status,
                            statusText: response.statusText,
                            headers: headers,
                            body: text
                        }));
                    })
                    .then(data => {
                        resultDiv.innerHTML = 
                            '<strong>Status:</strong> ' + data.status + ' ' + data.statusText + '\n' +
                            '<strong>Headers:</strong>\n' +
                            Object.entries(data.headers)
                                .filter(([key]) => key.startsWith('x-'))
                                .map(([key, value]) => '  ' + key + ': ' + value)
                                .join('\n') + '\n' +
                            '<strong>Response:</strong>\n' + data.body;
                    })
                    .catch(error => {
                        resultDiv.innerHTML = '<span style="color: #e74c3c;">Error: ' + error.message + '</span>';
                    });
            }
        </script>
    </head>
    <body>
        <div class="container">
            <div class="service-type">🛤️ Path-Based Routing</div>
            <h1>Path-Based Routing Demonstration</h1>
            <p><strong>Frontend Service</strong> - Serving the main application</p>

            <h3>🗺️ Routing Configuration</h3>
            <table class="routing-table">
                <thead>
                    <tr>
                        <th>Path</th>
                        <th>Path Type</th>
                        <th>Target Service</th>
                        <th>Description</th>
                        <th>Test</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><code>/</code></td>
                        <td><span class="path-type prefix">Prefix</span></td>
                        <td>frontend-service</td>
                        <td>Main application (default)</td>
                        <td><button class="test-button" onclick="testPath('/', 'root-result')">Test</button></td>
                    </tr>
                    <tr>
                        <td><code>/api</code></td>
                        <td><span class="path-type prefix">Prefix</span></td>
                        <td>api-service</td>
                        <td>API endpoints</td>
                        <td><button class="test-button" onclick="testPath('/api/users', 'api-result')">Test</button></td>
                    </tr>
                    <tr>
                        <td><code>/admin</code></td>
                        <td><span class="path-type prefix">Prefix</span></td>
                        <td>admin-service</td>
                        <td>Admin interface</td>
                        <td><button class="test-button" onclick="testPath('/admin/dashboard', 'admin-result')">Test</button></td>
                    </tr>
                    <tr>
                        <td><code>/health</code></td>
                        <td><span class="path-type exact">Exact</span></td>
                        <td>frontend-service</td>
                        <td>Health check (exact match)</td>
                        <td><button class="test-button" onclick="testPath('/health', 'health-result')">Test</button></td>
                    </tr>
                </tbody>
            </table>

            <div id="root-result" class="test-result" style="display: none;"></div>
            <div id="api-result" class="test-result" style="display: none;"></div>
            <div id="admin-result" class="test-result" style="display: none;"></div>
            <div id="health-result" class="test-result" style="display: none;"></div>

            <h3>🔬 Path Type Examples</h3>
            <div class="path-grid">
                <div class="path-card">
                    <h4><span class="path-type prefix">Prefix</span> Matching</h4>
                    <p><strong>Path:</strong> <code>/api</code></p>
                    <p><strong>Matches:</strong></p>
                    <ul>
                        <li>✅ <code>/api</code></li>
                        <li>✅ <code>/api/</code></li>
                        <li>✅ <code>/api/users</code></li>
                        <li>✅ <code>/api/v1/posts</code></li>
                        <li>❌ <code>/apidocs</code></li>
                    </ul>
                </div>
                
                <div class="path-card">
                    <h4><span class="path-type exact">Exact</span> Matching</h4>
                    <p><strong>Path:</strong> <code>/health</code></p>
                    <p><strong>Matches:</strong></p>
                    <ul>
                        <li>✅ <code>/health</code></li>
                        <li>❌ <code>/health/</code></li>
                        <li>❌ <code>/health/check</code></li>
                        <li>❌ <code>/healthz</code></li>
                    </ul>
                </div>
                
                <div class="path-card">
                    <h4><span class="path-type regex">ImplementationSpecific</span></h4>
                    <p><strong>Path:</strong> <code>/v1/api(/|$)(.*)</code></p>
                    <p><strong>Advanced regex matching with URL rewriting</strong></p>
                    <p>Used in advanced-path-routing ingress</p>
                </div>
            </div>

            <div class="test-section">
                <h3>🧪 Interactive Testing</h3>
                <p>Test different paths to see how they route to different services:</p>
                
                <h4>Frontend Paths</h4>
                <button class="test-button" onclick="testPath('/', 'frontend-test-1')">GET /</button>
                <button class="test-button" onclick="testPath('/about', 'frontend-test-2')">GET /about</button>
                <button class="test-button" onclick="testPath('/contact', 'frontend-test-3')">GET /contact</button>
                <div id="frontend-test-1" class="test-result" style="display: none;"></div>
                <div id="frontend-test-2" class="test-result" style="display: none;"></div>
                <div id="frontend-test-3" class="test-result" style="display: none;"></div>
                
                <h4>API Paths</h4>
                <button class="test-button" onclick="testPath('/api', 'api-test-1')">GET /api</button>
                <button class="test-button" onclick="testPath('/api/users', 'api-test-2')">GET /api/users</button>
                <button class="test-button" onclick="testPath('/api/v1/posts', 'api-test-3')">GET /api/v1/posts</button>
                <div id="api-test-1" class="test-result" style="display: none;"></div>
                <div id="api-test-2" class="test-result" style="display: none;"></div>
                <div id="api-test-3" class="test-result" style="display: none;"></div>
                
                <h4>Admin Paths</h4>
                <button class="test-button" onclick="testPath('/admin', 'admin-test-1')">GET /admin</button>
                <button class="test-button" onclick="testPath('/admin/users', 'admin-test-2')">GET /admin/users</button>
                <button class="test-button" onclick="testPath('/admin/settings', 'admin-test-3')">GET /admin/settings</button>
                <div id="admin-test-1" class="test-result" style="display: none;"></div>
                <div id="admin-test-2" class="test-result" style="display: none;"></div>
                <div id="admin-test-3" class="test-result" style="display: none;"></div>
            </div>

            <div class="test-section">
                <h3>📋 Setup Commands</h3>
                
                <h4>1. Deploy the Demo</h4>
                <div class="command">kubectl apply -f path-based-routing.yaml</div>
                
                <h4>2. Check Ingress Status</h4>
                <div class="command">kubectl get ingress -n path-routing-demo -o wide</div>
                
                <h4>3. Test with curl (Host header)</h4>
                <div class="command"># Get ingress IP
kubectl get ingress path-based-routing -n path-routing-demo

# Test different paths
curl -H "Host: app.local" http://&lt;INGRESS-IP&gt;/
curl -H "Host: app.local" http://&lt;INGRESS-IP&gt;/api/users
curl -H "Host: app.local" http://&lt;INGRESS-IP&gt;/admin/dashboard
curl -H "Host: app.local" http://&lt;INGRESS-IP&gt;/health</div>
                
                <h4>4. Test Advanced Routing (with URL rewriting)</h4>
                <div class="command">curl -H "Host: advanced.local" http://&lt;INGRESS-IP&gt;/v1/api/users
curl -H "Host: advanced.local" http://&lt;INGRESS-IP&gt;/panel/settings</div>
            </div>

            <h3>📚 Key Concepts</h3>
            <ul>
                <li><strong>Path Types:</strong> Prefix (most common), Exact (specific), ImplementationSpecific (regex)</li>
                <li><strong>Order Matters:</strong> More specific paths should come before general ones</li>
                <li><strong>URL Rewriting:</strong> Transform incoming paths before forwarding to backend</li>
                <li><strong>Default Backend:</strong> Catch-all for unmatched paths</li>
                <li><strong>Annotations:</strong> Controller-specific path handling configuration</li>
            </ul>

            <h3>🎯 Common Use Cases</h3>
            <div class="path-grid">
                <div class="path-card">
                    <h4>API Gateway</h4>
                    <p>Route <code>/api/*</code> to API services, <code>/*</code> to frontend</p>
                </div>
                <div class="path-card">
                    <h4>Microservices</h4>
                    <p>Different paths for different microservices: <code>/users/*</code>, <code>/orders/*</code>, <code>/products/*</code></p>
                </div>
                <div class="path-card">
                    <h4>Multi-tenant</h4>
                    <p>Route <code>/tenant1/*</code>, <code>/tenant2/*</code> to different backends</p>
                </div>
                <div class="path-card">
                    <h4>Legacy Migration</h4>
                    <p>Gradually migrate paths from old to new services</p>
                </div>
            </div>
        </div>
    </body>
    </html>

---
# ConfigMap for API content
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-content
  namespace: path-routing-demo
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>API Service</title>
        <style>
            body { font-family: Arial; background: #e8f4fd; padding: 40px; }
            .api-container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
            .endpoint { background: #f8f9fa; padding: 15px; margin: 10px 0; border-left: 4px solid #007bff; }
        </style>
    </head>
    <body>
        <div class="api-container">
            <h1>🚀 API Service</h1>
            <p>This is the API backend service, accessed via path-based routing.</p>
            <div class="endpoint">
                <strong>GET /api/users</strong> - Get all users
            </div>
            <div class="endpoint">
                <strong>GET /api/posts</strong> - Get all posts
            </div>
            <div class="endpoint">
                <strong>GET /api/health</strong> - API health check
            </div>
        </div>
    </body>
    </html>

---
# ConfigMap for Admin content
apiVersion: v1
kind: ConfigMap
metadata:
  name: admin-content
  namespace: path-routing-demo
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Admin Service</title>
        <style>
            body { font-family: Arial; background: #fff3e0; padding: 40px; }
            .admin-container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
            .admin-section { background: #f8f9fa; padding: 15px; margin: 10px 0; border-left: 4px solid #ff9800; }
        </style>
    </head>
    <body>
        <div class="admin-container">
            <h1>🔧 Admin Service</h1>
            <p>This is the admin backend service, accessed via path-based routing.</p>
            <div class="admin-section">
                <strong>/admin/users</strong> - User management
            </div>
            <div class="admin-section">
                <strong>/admin/settings</strong> - System settings
            </div>
            <div class="admin-section">
                <strong>/admin/health</strong> - Admin health check
            </div>
        </div>
    </body>
    </html>