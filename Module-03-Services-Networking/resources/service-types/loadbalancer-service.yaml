# LoadBalancer Service Example
# Demonstrates LoadBalancer service type for external access via cloud provider load balancer
# LoadBalancer creates an external load balancer (AWS ELB, GCP LB, Azure LB) with stable external IP
# Requires cloud provider integration and may incur additional costs

---
# Namespace for LoadBalancer service demonstration
apiVersion: v1
kind: Namespace
metadata:
  name: loadbalancer-example
  labels:
    service-type: loadbalancer
    purpose: external-production-access

---
# Deployment for production web application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
  namespace: loadbalancer-example
  labels:
    app: web-app
    service-type: loadbalancer
    tier: production
spec:
  replicas: 4  # Higher replica count for production
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: web-app
      service-type: loadbalancer
  template:
    metadata:
      labels:
        app: web-app
        service-type: loadbalancer
    spec:
      containers:
      - name: web-server
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        volumeMounts:
        - name: app-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        - name: app-content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: app-config
        configMap:
          name: web-app-config
      - name: app-content
        configMap:
          name: web-app-content

---
# Basic LoadBalancer Service
apiVersion: v1
kind: Service
metadata:
  name: web-app-loadbalancer
  namespace: loadbalancer-example
  labels:
    app: web-app
    service-type: loadbalancer
  annotations:
    # AWS ELB annotations (commented out for multi-cloud compatibility)
    # service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    # service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    # service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-1:123456789:certificate/cert-id"
    
    # GCP Load Balancer annotations (commented out for multi-cloud compatibility)
    # cloud.google.com/load-balancer-type: "External"
    # service.beta.kubernetes.io/gce-internal-load-balancer: "false"
    
    # Azure Load Balancer annotations (commented out for multi-cloud compatibility)
    # service.beta.kubernetes.io/azure-load-balancer-internal: "false"
    # service.beta.kubernetes.io/azure-pip-name: "my-public-ip"
    
    service.kubernetes.io/description: "Production LoadBalancer service for external web traffic"
spec:
  type: LoadBalancer
  selector:
    app: web-app
    service-type: loadbalancer
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  sessionAffinity: None
  # externalTrafficPolicy: Cluster  # Default, distributes traffic to all nodes
  # externalTrafficPolicy: Local    # Preserves source IP, routes only to local pods

---
# LoadBalancer Service with Local Traffic Policy
apiVersion: v1
kind: Service
metadata:
  name: web-app-loadbalancer-local
  namespace: loadbalancer-example
  labels:
    app: web-app
    service-type: loadbalancer
    traffic-policy: local
  annotations:
    service.kubernetes.io/description: "LoadBalancer with Local traffic policy to preserve source IP"
spec:
  type: LoadBalancer
  selector:
    app: web-app
    service-type: loadbalancer
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600
  externalTrafficPolicy: Local  # Preserves source IP, better security
  # Note: Local policy may result in uneven load distribution

---
# LoadBalancer Service with specific LoadBalancer IP (if supported)
apiVersion: v1
kind: Service
metadata:
  name: web-app-loadbalancer-static
  namespace: loadbalancer-example
  labels:
    app: web-app
    service-type: loadbalancer
    ip-type: static
  annotations:
    service.kubernetes.io/description: "LoadBalancer with requested static IP"
spec:
  type: LoadBalancer
  selector:
    app: web-app
    service-type: loadbalancer
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  # loadBalancerIP: "203.0.113.10"  # Deprecated in Kubernetes 1.24+
  # Use cloud provider specific annotations instead for static IPs
  loadBalancerSourceRanges:  # Restrict access to specific IP ranges
  - "10.0.0.0/8"      # Private networks
  - "172.16.0.0/12"   # Private networks  
  - "192.168.0.0/16"  # Private networks
  # - "203.0.113.0/24"  # Specific public IP range

---
# Health check pod for monitoring load balancer
apiVersion: v1
kind: Pod
metadata:
  name: lb-health-monitor
  namespace: loadbalancer-example
  labels:
    role: health-monitor
spec:
  containers:
  - name: monitor
    image: alpine:3.18
    command: ['sleep', '3600']
    resources:
      requests:
        memory: "32Mi"
        cpu: "25m"
      limits:
        memory: "64Mi"
        cpu: "50m"

---
# ConfigMap for nginx configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: web-app-config
  namespace: loadbalancer-example
data:
  default.conf: |
    server {
        listen 80;
        listen 443 ssl http2;
        server_name _;

        # SSL configuration (self-signed for demo)
        ssl_certificate /etc/ssl/certs/server.crt;
        ssl_certificate_key /etc/ssl/private/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS;
        ssl_prefer_server_ciphers off;

        # Add headers to show service information
        add_header X-Service-Type "LoadBalancer";
        add_header X-Pod-Name $hostname;
        add_header X-Request-ID $request_id;
        add_header X-Real-IP $remote_addr;
        add_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Detailed health endpoint for load balancer
        location /lb-health {
            access_log off;
            return 200 "{\"status\": \"healthy\", \"service\": \"LoadBalancer\", \"pod\": \"$hostname\", \"timestamp\": \"$time_iso8601\", \"connections\": \"$connections_active\"}\n";
            add_header Content-Type application/json;
        }

        # Load balancer information endpoint
        location /lb-info {
            access_log off;
            return 200 "{\"service_type\": \"LoadBalancer\", \"external_access\": true, \"cloud_provider\": \"auto-detected\", \"pod\": \"$hostname\", \"real_ip\": \"$remote_addr\", \"forwarded_for\": \"$http_x_forwarded_for\"}\n";
            add_header Content-Type application/json;
        }

        # Request debugging endpoint
        location /debug {
            access_log off;
            return 200 "Remote Addr: $remote_addr\nX-Forwarded-For: $http_x_forwarded_for\nX-Real-IP: $http_x_real_ip\nHost: $host\nUser-Agent: $http_user_agent\nRequest ID: $request_id\nConnection: $connection\nConnection Requests: $connection_requests\n";
            add_header Content-Type text/plain;
        }

        # Performance metrics endpoint
        location /metrics {
            access_log off;
            return 200 "# TYPE nginx_connections_active gauge\nnginx_connections_active $connections_active\n# TYPE nginx_connections_reading gauge\nnginx_connections_reading $connections_reading\n# TYPE nginx_connections_writing gauge\nnginx_connections_writing $connections_writing\n# TYPE nginx_connections_waiting gauge\nnginx_connections_waiting $connections_waiting\n";
            add_header Content-Type text/plain;
        }
    }

---
# ConfigMap for web content
apiVersion: v1
kind: ConfigMap
metadata:
  name: web-app-content
  namespace: loadbalancer-example
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>LoadBalancer Service Demo</title>
        <style>
            body {
                font-family: 'Arial', sans-serif;
                margin: 0;
                padding: 40px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 1000px;
                margin: 0 auto;
                background: rgba(255, 255, 255, 0.1);
                padding: 40px;
                border-radius: 20px;
                backdrop-filter: blur(15px);
                box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            }
            .service-type {
                background: #2196F3;
                padding: 12px 24px;
                border-radius: 30px;
                display: inline-block;
                margin-bottom: 30px;
                font-weight: bold;
                font-size: 1.1em;
            }
            .info-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
                gap: 25px;
                margin: 30px 0;
            }
            .info-card {
                background: rgba(255, 255, 255, 0.2);
                padding: 25px;
                border-radius: 15px;
                border-left: 5px solid #2196F3;
                transition: transform 0.3s ease;
            }
            .info-card:hover {
                transform: translateY(-5px);
            }
            .feature-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 20px;
                margin: 30px 0;
            }
            .feature-card {
                background: rgba(255, 255, 255, 0.15);
                padding: 20px;
                border-radius: 12px;
                border-top: 3px solid #4CAF50;
            }
            .service-table {
                width: 100%;
                border-collapse: collapse;
                margin: 25px 0;
                background: rgba(255, 255, 255, 0.9);
                color: #333;
                border-radius: 10px;
                overflow: hidden;
                box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
            }
            .service-table th, .service-table td {
                padding: 15px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }
            .service-table th {
                background: #2196F3;
                color: white;
                font-weight: bold;
            }
            .service-table tr:hover {
                background: #f5f5f5;
            }
            .endpoint {
                background: rgba(255, 255, 255, 0.2);
                padding: 18px;
                border-radius: 10px;
                margin: 15px 0;
                border-left: 4px solid #FF9800;
            }
            .command {
                background: #1a202c;
                color: #e2e8f0;
                padding: 20px;
                border-radius: 10px;
                font-family: 'Courier New', monospace;
                margin: 15px 0;
                overflow-x: auto;
                border-left: 4px solid #38b2ac;
            }
            .cloud-provider {
                background: rgba(255, 255, 255, 0.1);
                padding: 20px;
                border-radius: 12px;
                margin: 20px 0;
                border-left: 4px solid #9c27b0;
            }
            .success { color: #4CAF50; font-weight: bold; }
            .warning { color: #FF9800; font-weight: bold; }
            .info { color: #2196F3; font-weight: bold; }
            .external { color: #FF5722; font-weight: bold; }
            .status-indicator {
                display: inline-block;
                width: 12px;
                height: 12px;
                border-radius: 50%;
                margin-right: 8px;
            }
            .status-green { background-color: #4CAF50; }
            .status-blue { background-color: #2196F3; }
            .status-orange { background-color: #FF9800; }
        </style>
        <script>
            function updateLBInfo() {
                document.getElementById('current-url').innerHTML = window.location.href;
                document.getElementById('protocol').innerHTML = window.location.protocol;
                document.getElementById('hostname').innerHTML = window.location.hostname;
                document.getElementById('port').innerHTML = window.location.port || (window.location.protocol === 'https:' ? '443' : '80');
                
                // Check if accessed via LoadBalancer
                if (window.location.hostname !== 'localhost' && !window.location.hostname.startsWith('192.168') && !window.location.hostname.startsWith('10.')) {
                    document.getElementById('lb-status').className = 'status-indicator status-green';
                    document.getElementById('lb-text').innerHTML = 'Accessed via LoadBalancer';
                } else {
                    document.getElementById('lb-status').className = 'status-indicator status-orange';
                    document.getElementById('lb-text').innerHTML = 'Accessed via local/internal IP';
                }
            }
            
            function testEndpoint(endpoint) {
                fetch(endpoint)
                    .then(response => response.text())
                    .then(data => {
                        document.getElementById('endpoint-result').innerHTML = '<pre>' + data + '</pre>';
                    })
                    .catch(error => {
                        document.getElementById('endpoint-result').innerHTML = 'Error: ' + error.message;
                    });
            }
            
            window.onload = updateLBInfo;
        </script>
    </head>
    <body>
        <div class="container">
            <div class="service-type">☁️ LoadBalancer Service</div>
            <h1>LoadBalancer Service Demonstration</h1>
            
            <div class="info-grid">
                <div class="info-card">
                    <h3>Service Type</h3>
                    <p><strong>LoadBalancer</strong> - Cloud provider external load balancer</p>
                </div>
                <div class="info-card">
                    <h3>Access Scope</h3>
                    <p><strong>Internet-facing</strong> - Stable external IP address</p>
                </div>
                <div class="info-card">
                    <h3>Cloud Integration</h3>
                    <p><strong>Provider-managed</strong> - AWS ELB, GCP LB, Azure LB</p>
                </div>
                <div class="info-card">
                    <h3>Use Cases</h3>
                    <p><strong>Production Web Apps</strong> - High availability, auto-scaling</p>
                </div>
            </div>

            <h3>🌐 Current Access Information</h3>
            <div class="cloud-provider">
                <p><span id="lb-status" class="status-indicator status-blue"></span><span id="lb-text">Checking LoadBalancer status...</span></p>
                <p><strong>Access URL:</strong> <span id="current-url"></span></p>
                <p><strong>Protocol:</strong> <span id="protocol"></span> | <strong>Host:</strong> <span id="hostname"></span> | <strong>Port:</strong> <span id="port"></span></p>
            </div>

            <h3>🔗 Service Configuration</h3>
            <table class="service-table">
                <thead>
                    <tr>
                        <th>Service Name</th>
                        <th>Type</th>
                        <th>External IP</th>
                        <th>Ports</th>
                        <th>Traffic Policy</th>
                        <th>Session Affinity</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>web-app-loadbalancer</td>
                        <td>LoadBalancer</td>
                        <td>&lt;EXTERNAL-IP&gt;</td>
                        <td>80:HTTP, 443:HTTPS</td>
                        <td>Cluster</td>
                        <td>None</td>
                    </tr>
                    <tr>
                        <td>web-app-loadbalancer-local</td>
                        <td>LoadBalancer</td>
                        <td>&lt;EXTERNAL-IP&gt;</td>
                        <td>80:HTTP</td>
                        <td>Local</td>
                        <td>ClientIP</td>
                    </tr>
                    <tr>
                        <td>web-app-loadbalancer-static</td>
                        <td>LoadBalancer</td>
                        <td>Static IP</td>
                        <td>80:HTTP</td>
                        <td>Cluster</td>
                        <td>None</td>
                    </tr>
                </tbody>
            </table>

            <h3>☁️ Cloud Provider Features</h3>
            <div class="feature-grid">
                <div class="feature-card">
                    <h4>AWS ELB Integration</h4>
                    <p>Network Load Balancer (NLB) or Classic Load Balancer with SSL termination, health checks, and multi-AZ support</p>
                </div>
                <div class="feature-card">
                    <h4>GCP Load Balancer</h4>
                    <p>HTTP(S) Load Balancer with global anycast IPs, CDN integration, and automatic SSL certificate management</p>
                </div>
                <div class="feature-card">
                    <h4>Azure Load Balancer</h4>
                    <p>Standard Load Balancer with availability zones, outbound rules, and Azure Monitor integration</p>
                </div>
                <div class="feature-card">
                    <h4>High Availability</h4>
                    <p>Built-in redundancy, automatic failover, and health monitoring across multiple zones</p>
                </div>
            </div>

            <h3>🔍 Available Endpoints</h3>
            <div class="endpoint">
                <strong>GET /</strong> - This landing page
                <button onclick="testEndpoint('/')" style="float: right; padding: 5px 10px;">Test</button>
            </div>
            <div class="endpoint">
                <strong>GET /health</strong> - Basic health check
                <button onclick="testEndpoint('/health')" style="float: right; padding: 5px 10px;">Test</button>
            </div>
            <div class="endpoint">
                <strong>GET /lb-health</strong> - Detailed health info (JSON)
                <button onclick="testEndpoint('/lb-health')" style="float: right; padding: 5px 10px;">Test</button>
            </div>
            <div class="endpoint">
                <strong>GET /lb-info</strong> - LoadBalancer information (JSON)
                <button onclick="testEndpoint('/lb-info')" style="float: right; padding: 5px 10px;">Test</button>
            </div>
            <div class="endpoint">
                <strong>GET /debug</strong> - Request debugging information
                <button onclick="testEndpoint('/debug')" style="float: right; padding: 5px 10px;">Test</button>
            </div>
            <div class="endpoint">
                <strong>GET /metrics</strong> - Prometheus-style metrics
                <button onclick="testEndpoint('/metrics')" style="float: right; padding: 5px 10px;">Test</button>
            </div>
            
            <div id="endpoint-result" style="background: rgba(0,0,0,0.3); padding: 15px; border-radius: 8px; margin-top: 20px; font-family: monospace;"></div>

            <h3>🧪 Testing Commands</h3>
            
            <p><strong>1. Check LoadBalancer Services:</strong></p>
            <div class="command">kubectl get services -n loadbalancer-example -o wide</div>
            
            <p><strong>2. Watch External IP Assignment:</strong></p>
            <div class="command">kubectl get service web-app-loadbalancer -n loadbalancer-example -w</div>
            
            <p><strong>3. External Access Test:</strong></p>
            <div class="command">curl http://&lt;EXTERNAL-IP&gt;
curl https://&lt;EXTERNAL-IP&gt;</div>
            
            <p><strong>4. Health Check Test:</strong></p>
            <div class="command">curl http://&lt;EXTERNAL-IP&gt;/lb-health</div>
            
            <p><strong>5. Load Balancing Verification:</strong></p>
            <div class="command">for i in {1..10}; do curl -s http://&lt;EXTERNAL-IP&gt;/lb-info | grep pod; done</div>
            
            <p><strong>6. Source IP Preservation Test (Local Traffic Policy):</strong></p>
            <div class="command">curl http://&lt;EXTERNAL-IP-LOCAL&gt;/debug | grep "Remote Addr"</div>

            <h3>📋 Key Features</h3>
            <ul>
                <li class="success">✅ Stable external IP address</li>
                <li class="success">✅ Cloud provider managed health checks</li>
                <li class="success">✅ Automatic SSL termination (cloud-dependent)</li>
                <li class="success">✅ Multi-zone high availability</li>
                <li class="success">✅ Built-in DDoS protection</li>
                <li class="success">✅ Integration with cloud monitoring</li>
                <li class="info">ℹ️ Inherits all ClusterIP and NodePort functionality</li>
                <li class="warning">⚠️ Cloud provider dependency</li>
                <li class="warning">⚠️ Additional cost for load balancer</li>
                <li class="warning">⚠️ May have provider-specific limitations</li>
            </ul>

            <h3>🔧 Traffic Policies</h3>
            <div class="info-grid">
                <div class="info-card">
                    <h4>Cluster (Default)</h4>
                    <p><strong>Behavior:</strong> Distributes traffic to all healthy pods across all nodes</p>
                    <p><strong>Pros:</strong> Even load distribution, higher availability</p>
                    <p><strong>Cons:</strong> Source IP is not preserved</p>
                </div>
                <div class="info-card">
                    <h4>Local</h4>
                    <p><strong>Behavior:</strong> Routes traffic only to pods on the same node as the load balancer endpoint</p>
                    <p><strong>Pros:</strong> Preserves source IP, lower latency</p>
                    <p><strong>Cons:</strong> May cause uneven load distribution</p>
                </div>
            </div>

            <h3>💰 Cost Considerations</h3>
            <div class="cloud-provider">
                <p><strong>💡 Important:</strong> LoadBalancer services typically incur additional charges from your cloud provider:</p>
                <ul>
                    <li><strong>AWS:</strong> $0.0225/hour for NLB + $0.006 per LCU-hour</li>
                    <li><strong>GCP:</strong> $0.025/hour for HTTP(S) LB + usage-based forwarding rules</li>
                    <li><strong>Azure:</strong> $0.025/hour for Standard LB + $0.005 per rule</li>
                </ul>
                <p><em>Prices are approximate and vary by region. Check your cloud provider's current pricing.</em></p>
            </div>

            <h3>🚀 Production Best Practices</h3>
            <ul>
                <li><strong>SSL/TLS:</strong> Always use HTTPS in production with proper certificates</li>
                <li><strong>Health Checks:</strong> Configure appropriate health check endpoints</li>
                <li><strong>Monitoring:</strong> Set up monitoring and alerting for load balancer metrics</li>
                <li><strong>Security Groups:</strong> Restrict access using cloud provider security groups</li>
                <li><strong>Backup Strategy:</strong> Plan for load balancer failure scenarios</li>
                <li><strong>Cost Optimization:</strong> Monitor usage and optimize for cost efficiency</li>
            </ul>
        </div>
    </body>
    </html>